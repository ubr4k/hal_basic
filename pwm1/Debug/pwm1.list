
pwm1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c2c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002df0  08002df0  00003df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e08  08002e08  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e08  08002e08  00003e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e10  08002e10  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e10  08002e10  00003e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e14  08002e14  00003e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e18  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08002e24  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002e24  000040d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d061  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001add  00000000  00000000  0001109d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00012b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000933  00000000  00000000  00013730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022239  00000000  00000000  00014063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3d9  00000000  00000000  0003629c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d958b  00000000  00000000  00044675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011dc00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a0  00000000  00000000  0011dc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  00120de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002dd8 	.word	0x08002dd8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002dd8 	.word	0x08002dd8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SysTick_Handler>:
#include "mainb.h"

extern TIM_HandleTypeDef htim2;

void SysTick_Handler (void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004f8:	f000 fb14 	bl	8000b24 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004fc:	f000 fc60 	bl	8000dc0 <HAL_SYSTICK_IRQHandler>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8000508:	4802      	ldr	r0, [pc, #8]	@ (8000514 <TIM2_IRQHandler+0x10>)
 800050a:	f001 fcfb 	bl	8001f04 <HAL_TIM_IRQHandler>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000084 	.word	0x20000084

08000518 <main>:
uint16_t readvalue1;
uint16_t readvalue2;


int main (void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_Init();
 800051c:	f000 fab0 	bl	8000a80 <HAL_Init>
	SystemClockConfig(50);
 8000520:	2032      	movs	r0, #50	@ 0x32
 8000522:	f000 f82f 	bl	8000584 <SystemClockConfig>
	uart2_init();
 8000526:	f000 f8cb 	bl	80006c0 <uart2_init>
	gpio_init();
 800052a:	f000 f8ef 	bl	800070c <gpio_init>
	timer2_init();
 800052e:	f000 f919 	bl	8000764 <timer2_init>

	if ( HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1) != HAL_OK)
 8000532:	2100      	movs	r1, #0
 8000534:	4812      	ldr	r0, [pc, #72]	@ (8000580 <main+0x68>)
 8000536:	f001 fc1d 	bl	8001d74 <HAL_TIM_PWM_Start>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <main+0x2c>
	  {
	    Error_handler();
 8000540:	f000 f992 	bl	8000868 <Error_handler>
	  }

	  if ( HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2) != HAL_OK)
 8000544:	2104      	movs	r1, #4
 8000546:	480e      	ldr	r0, [pc, #56]	@ (8000580 <main+0x68>)
 8000548:	f001 fc14 	bl	8001d74 <HAL_TIM_PWM_Start>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <main+0x3e>
	  {
	    Error_handler();
 8000552:	f000 f989 	bl	8000868 <Error_handler>
	  }

	  if ( HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3) != HAL_OK)
 8000556:	2108      	movs	r1, #8
 8000558:	4809      	ldr	r0, [pc, #36]	@ (8000580 <main+0x68>)
 800055a:	f001 fc0b 	bl	8001d74 <HAL_TIM_PWM_Start>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <main+0x50>
	  {
	    Error_handler();
 8000564:	f000 f980 	bl	8000868 <Error_handler>
	  }

	  if ( HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4) != HAL_OK)
 8000568:	210c      	movs	r1, #12
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <main+0x68>)
 800056c:	f001 fc02 	bl	8001d74 <HAL_TIM_PWM_Start>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d002      	beq.n	800057c <main+0x64>
	  {
	    Error_handler();
 8000576:	f000 f977 	bl	8000868 <Error_handler>
	  }

	while(1);
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <main+0x64>
 8000580:	20000084 	.word	0x20000084

08000584 <SystemClockConfig>:
	return 0;
}

void SystemClockConfig(uint8_t clock)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	@ 0x58
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
	uint8_t flash_latency=0;
 800058e:	2300      	movs	r3, #0
 8000590:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI ;
 8000594:	2307      	movs	r3, #7
 8000596:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800059c:	623b      	str	r3, [r7, #32]
	Osc_Init.LSEState = RCC_LSE_ON;
 800059e:	2301      	movs	r3, #1
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
	Osc_Init.HSIState = RCC_HSI_ON;
 80005a2:	2301      	movs	r3, #1
 80005a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    Osc_Init.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	637b      	str	r3, [r7, #52]	@ 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ae:	63bb      	str	r3, [r7, #56]	@ 0x38

	switch(clock) {
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b78      	cmp	r3, #120	@ 0x78
 80005b4:	d038      	beq.n	8000628 <SystemClockConfig+0xa4>
 80005b6:	2b78      	cmp	r3, #120	@ 0x78
 80005b8:	dc7c      	bgt.n	80006b4 <SystemClockConfig+0x130>
 80005ba:	2b32      	cmp	r3, #50	@ 0x32
 80005bc:	d002      	beq.n	80005c4 <SystemClockConfig+0x40>
 80005be:	2b54      	cmp	r3, #84	@ 0x54
 80005c0:	d019      	beq.n	80005f6 <SystemClockConfig+0x72>
	  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
	  flash_latency = 3;
	  break;

	default:
	  return ;
 80005c2:	e077      	b.n	80006b4 <SystemClockConfig+0x130>
	  Osc_Init.PLL.PLLM = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  Osc_Init.PLL.PLLN = 50;
 80005c8:	2332      	movs	r3, #50	@ 0x32
 80005ca:	643b      	str	r3, [r7, #64]	@ 0x40
	  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	647b      	str	r3, [r7, #68]	@ 0x44
	  Osc_Init.PLL.PLLQ = 2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	@ 0x48
	  Osc_Init.PLL.PLLR = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80005d8:	230f      	movs	r3, #15
 80005da:	60bb      	str	r3, [r7, #8]
	  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	60fb      	str	r3, [r7, #12]
	  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
	  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e8:	617b      	str	r3, [r7, #20]
	  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
	  flash_latency = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  break;
 80005f4:	e032      	b.n	800065c <SystemClockConfig+0xd8>
	  Osc_Init.PLL.PLLM = 4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  Osc_Init.PLL.PLLN = 84;
 80005fa:	2354      	movs	r3, #84	@ 0x54
 80005fc:	643b      	str	r3, [r7, #64]	@ 0x40
	  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	647b      	str	r3, [r7, #68]	@ 0x44
	  Osc_Init.PLL.PLLQ = 2;
 8000602:	2302      	movs	r3, #2
 8000604:	64bb      	str	r3, [r7, #72]	@ 0x48
	  Osc_Init.PLL.PLLR = 2;
 8000606:	2302      	movs	r3, #2
 8000608:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800060a:	230f      	movs	r3, #15
 800060c:	60bb      	str	r3, [r7, #8]
	  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	60fb      	str	r3, [r7, #12]
	  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
	  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061a:	617b      	str	r3, [r7, #20]
	  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
	  flash_latency = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  break;
 8000626:	e019      	b.n	800065c <SystemClockConfig+0xd8>
	  Osc_Init.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  Osc_Init.PLL.PLLN = 120;
 800062c:	2378      	movs	r3, #120	@ 0x78
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
	  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
	  Osc_Init.PLL.PLLQ = 2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
	  Osc_Init.PLL.PLLR = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800063c:	230f      	movs	r3, #15
 800063e:	60bb      	str	r3, [r7, #8]
	  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	60fb      	str	r3, [r7, #12]
	  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
	  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800064c:	617b      	str	r3, [r7, #20]
	  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000652:	61bb      	str	r3, [r7, #24]
	  flash_latency = 3;
 8000654:	2303      	movs	r3, #3
 8000656:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  break;
 800065a:	bf00      	nop
	}

	if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f899 	bl	8001798 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClockConfig+0xec>
	{
	  Error_handler();
 800066c:	f000 f8fc 	bl	8000868 <Error_handler>
	}

	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000670:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4611      	mov	r1, r2
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fd42 	bl	8001104 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClockConfig+0x106>
	{
	  Error_handler();
 8000686:	f000 f8ef 	bl	8000868 <Error_handler>
	}

	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 800068a:	f000 fe21 	bl	80012d0 <HAL_RCC_GetHCLKFreq>
 800068e:	6538      	str	r0, [r7, #80]	@ 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000692:	4a0a      	ldr	r2, [pc, #40]	@ (80006bc <SystemClockConfig+0x138>)
 8000694:	fba2 2303 	umull	r2, r3, r2, r3
 8000698:	099b      	lsrs	r3, r3, #6
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fb67 	bl	8000d6e <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006a0:	2004      	movs	r0, #4
 80006a2:	f000 fb71 	bl	8000d88 <HAL_SYSTICK_CLKSourceConfig>

	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	f04f 30ff 	mov.w	r0, #4294967295
 80006ae:	f000 fb34 	bl	8000d1a <HAL_NVIC_SetPriority>
 80006b2:	e000      	b.n	80006b6 <SystemClockConfig+0x132>
	  return ;
 80006b4:	bf00      	nop
}
 80006b6:	3758      	adds	r7, #88	@ 0x58
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	10624dd3 	.word	0x10624dd3

080006c0 <uart2_init>:

void uart2_init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <uart2_init+0x44>)
 80006c6:	4a10      	ldr	r2, [pc, #64]	@ (8000708 <uart2_init+0x48>)
 80006c8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <uart2_init+0x44>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <uart2_init+0x44>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <uart2_init+0x44>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <uart2_init+0x44>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <uart2_init+0x44>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode=UART_MODE_TX_RX;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <uart2_init+0x44>)
 80006ec:	220c      	movs	r2, #12
 80006ee:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2)!= HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <uart2_init+0x44>)
 80006f2:	f002 f880 	bl	80027f6 <HAL_UART_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <uart2_init+0x40>
	{
		Error_handler();
 80006fc:	f000 f8b4 	bl	8000868 <Error_handler>
	}
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000028 	.word	0x20000028
 8000708:	40004400 	.word	0x40004400

0800070c <gpio_init>:

void gpio_init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <gpio_init+0x4c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a0f      	ldr	r2, [pc, #60]	@ (8000758 <gpio_init+0x4c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <gpio_init+0x4c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
	ledgpio.Pin = GPIO_PIN_5;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <gpio_init+0x50>)
 8000730:	2220      	movs	r2, #32
 8000732:	601a      	str	r2, [r3, #0]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <gpio_init+0x50>)
 8000736:	2201      	movs	r2, #1
 8000738:	605a      	str	r2, [r3, #4]
	ledgpio.Speed = GPIO_SPEED_LOW;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <gpio_init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
	ledgpio.Pull = GPIO_NOPULL;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <gpio_init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &ledgpio);
 8000746:	4905      	ldr	r1, [pc, #20]	@ (800075c <gpio_init+0x50>)
 8000748:	4805      	ldr	r0, [pc, #20]	@ (8000760 <gpio_init+0x54>)
 800074a:	f000 fb47 	bl	8000ddc <HAL_GPIO_Init>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	20000070 	.word	0x20000070
 8000760:	40020000 	.word	0x40020000

08000764 <timer2_init>:

void timer2_init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
	htim2.Instance = TIM2;
 800076a:	4b3d      	ldr	r3, [pc, #244]	@ (8000860 <timer2_init+0xfc>)
 800076c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000770:	601a      	str	r2, [r3, #0]
	htim2.Init.Period = 20;
 8000772:	4b3b      	ldr	r3, [pc, #236]	@ (8000860 <timer2_init+0xfc>)
 8000774:	2214      	movs	r2, #20
 8000776:	60da      	str	r2, [r3, #12]
	htim2.Init.Prescaler =16;
 8000778:	4b39      	ldr	r3, [pc, #228]	@ (8000860 <timer2_init+0xfc>)
 800077a:	2210      	movs	r2, #16
 800077c:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800077e:	4838      	ldr	r0, [pc, #224]	@ (8000860 <timer2_init+0xfc>)
 8000780:	f001 faa8 	bl	8001cd4 <HAL_TIM_PWM_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <timer2_init+0x2a>
	{
		Error_handler();
 800078a:	f000 f86d 	bl	8000868 <Error_handler>
	}
	TIM_OC_InitTypeDef tim2pwm;

	memset(&tim2pwm,0,sizeof(tim2pwm));
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	221c      	movs	r2, #28
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f002 faf3 	bl	8002d80 <memset>

	tim2pwm.OCMode = TIM_OCMODE_PWM1;
 800079a:	2360      	movs	r3, #96	@ 0x60
 800079c:	607b      	str	r3, [r7, #4]
	tim2pwm.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]

	tim2pwm.Pulse = (htim2.Init.Period *25)/100;
 80007a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <timer2_init+0xfc>)
 80007a4:	68da      	ldr	r2, [r3, #12]
 80007a6:	4613      	mov	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	009a      	lsls	r2, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	4a2c      	ldr	r2, [pc, #176]	@ (8000864 <timer2_init+0x100>)
 80007b2:	fba2 2303 	umull	r2, r3, r2, r3
 80007b6:	095b      	lsrs	r3, r3, #5
 80007b8:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htim2, &tim2pwm, TIM_CHANNEL_1)!= HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	4827      	ldr	r0, [pc, #156]	@ (8000860 <timer2_init+0xfc>)
 80007c2:	f001 fc8f 	bl	80020e4 <HAL_TIM_PWM_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <timer2_init+0x6c>
	{
		Error_handler();
 80007cc:	f000 f84c 	bl	8000868 <Error_handler>
	}

	tim2pwm.Pulse = (htim2.Init.Period *50)/100;
 80007d0:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <timer2_init+0xfc>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	2232      	movs	r2, #50	@ 0x32
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
 80007da:	4a22      	ldr	r2, [pc, #136]	@ (8000864 <timer2_init+0x100>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	095b      	lsrs	r3, r3, #5
 80007e2:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htim2, &tim2pwm, TIM_CHANNEL_2)!= HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2204      	movs	r2, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	481d      	ldr	r0, [pc, #116]	@ (8000860 <timer2_init+0xfc>)
 80007ec:	f001 fc7a 	bl	80020e4 <HAL_TIM_PWM_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <timer2_init+0x96>
	{
		Error_handler();
 80007f6:	f000 f837 	bl	8000868 <Error_handler>
	}

	tim2pwm.Pulse = (htim2.Init.Period *75)/100;
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <timer2_init+0xfc>)
 80007fc:	68da      	ldr	r2, [r3, #12]
 80007fe:	4613      	mov	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	4413      	add	r3, r2
 8000804:	011a      	lsls	r2, r3, #4
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <timer2_init+0x100>)
 800080a:	fba2 2303 	umull	r2, r3, r2, r3
 800080e:	095b      	lsrs	r3, r3, #5
 8000810:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htim2, &tim2pwm, TIM_CHANNEL_3)!= HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2208      	movs	r2, #8
 8000816:	4619      	mov	r1, r3
 8000818:	4811      	ldr	r0, [pc, #68]	@ (8000860 <timer2_init+0xfc>)
 800081a:	f001 fc63 	bl	80020e4 <HAL_TIM_PWM_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <timer2_init+0xc4>
	{
		Error_handler();
 8000824:	f000 f820 	bl	8000868 <Error_handler>
	}

	tim2pwm.Pulse = (htim2.Init.Period *95)/100;
 8000828:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <timer2_init+0xfc>)
 800082a:	68da      	ldr	r2, [r3, #12]
 800082c:	4613      	mov	r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	4413      	add	r3, r2
 8000832:	015b      	lsls	r3, r3, #5
 8000834:	1a9b      	subs	r3, r3, r2
 8000836:	4a0b      	ldr	r2, [pc, #44]	@ (8000864 <timer2_init+0x100>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	095b      	lsrs	r3, r3, #5
 800083e:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&htim2, &tim2pwm, TIM_CHANNEL_4)!= HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	220c      	movs	r2, #12
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <timer2_init+0xfc>)
 8000848:	f001 fc4c 	bl	80020e4 <HAL_TIM_PWM_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <timer2_init+0xf2>
	{
		Error_handler();
 8000852:	f000 f809 	bl	8000868 <Error_handler>
	}
}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000084 	.word	0x20000084
 8000864:	51eb851f 	.word	0x51eb851f

08000868 <Error_handler>:


void Error_handler (void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	while(1);
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <Error_handler+0x4>

08000870 <HAL_MspInit>:


#include "mainb.h"

void HAL_MspInit (void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 fa45 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

	SCB->SHCSR |= 0x7 << 16;
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <HAL_MspInit+0x40>)
 800087c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800087e:	4a0c      	ldr	r2, [pc, #48]	@ (80008b0 <HAL_MspInit+0x40>)
 8000880:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000884:	6253      	str	r3, [r2, #36]	@ 0x24

	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	f06f 000b 	mvn.w	r0, #11
 800088e:	f000 fa44 	bl	8000d1a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	f06f 000a 	mvn.w	r0, #10
 800089a:	f000 fa3e 	bl	8000d1a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	f06f 0009 	mvn.w	r0, #9
 80008a6:	f000 fa38 	bl	8000d1a <HAL_NVIC_SetPriority>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  __HAL_RCC_USART2_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	4b1e      	ldr	r3, [pc, #120]	@ (800093c <HAL_UART_MspInit+0x88>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c4:	4a1d      	ldr	r2, [pc, #116]	@ (800093c <HAL_UART_MspInit+0x88>)
 80008c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <HAL_UART_MspInit+0x88>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4b17      	ldr	r3, [pc, #92]	@ (800093c <HAL_UART_MspInit+0x88>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e0:	4a16      	ldr	r2, [pc, #88]	@ (800093c <HAL_UART_MspInit+0x88>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <HAL_UART_MspInit+0x88>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitTypeDef gpio_uart2;
  gpio_uart2.Pin = GPIO_PIN_2;
 80008f4:	2304      	movs	r3, #4
 80008f6:	617b      	str	r3, [r7, #20]
  gpio_uart2.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  gpio_uart2.Speed = GPIO_SPEED_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  gpio_uart2.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
  gpio_uart2.Alternate = GPIO_AF7_USART2;
 8000904:	2307      	movs	r3, #7
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &gpio_uart2);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	480c      	ldr	r0, [pc, #48]	@ (8000940 <HAL_UART_MspInit+0x8c>)
 8000910:	f000 fa64 	bl	8000ddc <HAL_GPIO_Init>

  gpio_uart2.Pin = GPIO_PIN_3;
 8000914:	2308      	movs	r3, #8
 8000916:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &gpio_uart2);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4808      	ldr	r0, [pc, #32]	@ (8000940 <HAL_UART_MspInit+0x8c>)
 8000920:	f000 fa5c 	bl	8000ddc <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000924:	2026      	movs	r0, #38	@ 0x26
 8000926:	f000 fa14 	bl	8000d52 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	2026      	movs	r0, #38	@ 0x26
 8000930:	f000 f9f3 	bl	8000d1a <HAL_NVIC_SetPriority>

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	@ 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000

08000944 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	4b2a      	ldr	r3, [pc, #168]	@ (80009fc <HAL_TIM_PWM_MspInit+0xb8>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	4a29      	ldr	r2, [pc, #164]	@ (80009fc <HAL_TIM_PWM_MspInit+0xb8>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6413      	str	r3, [r2, #64]	@ 0x40
 800095c:	4b27      	ldr	r3, [pc, #156]	@ (80009fc <HAL_TIM_PWM_MspInit+0xb8>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <HAL_TIM_PWM_MspInit+0xb8>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000970:	4a22      	ldr	r2, [pc, #136]	@ (80009fc <HAL_TIM_PWM_MspInit+0xb8>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6313      	str	r3, [r2, #48]	@ 0x30
 8000978:	4b20      	ldr	r3, [pc, #128]	@ (80009fc <HAL_TIM_PWM_MspInit+0xb8>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <HAL_TIM_PWM_MspInit+0xb8>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098c:	4a1b      	ldr	r2, [pc, #108]	@ (80009fc <HAL_TIM_PWM_MspInit+0xb8>)
 800098e:	f043 0302 	orr.w	r3, r3, #2
 8000992:	6313      	str	r3, [r2, #48]	@ 0x30
 8000994:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <HAL_TIM_PWM_MspInit+0xb8>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef tim2chn;
	tim2chn.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80009a0:	2303      	movs	r3, #3
 80009a2:	617b      	str	r3, [r7, #20]
	tim2chn.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
	tim2chn.Pull = GPIO_PULLDOWN;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]
	tim2chn.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
	tim2chn.Alternate = GPIO_AF1_TIM2;
 80009b0:	2301      	movs	r3, #1
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &tim2chn);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4811      	ldr	r0, [pc, #68]	@ (8000a00 <HAL_TIM_PWM_MspInit+0xbc>)
 80009bc:	f000 fa0e 	bl	8000ddc <HAL_GPIO_Init>

	tim2chn.Pin = GPIO_PIN_2 | GPIO_PIN_10;
 80009c0:	f240 4304 	movw	r3, #1028	@ 0x404
 80009c4:	617b      	str	r3, [r7, #20]
	tim2chn.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
	tim2chn.Pull = GPIO_PULLDOWN;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61fb      	str	r3, [r7, #28]
	tim2chn.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
	tim2chn.Alternate = GPIO_AF1_TIM2;
 80009d2:	2301      	movs	r3, #1
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &tim2chn);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4809      	ldr	r0, [pc, #36]	@ (8000a04 <HAL_TIM_PWM_MspInit+0xc0>)
 80009de:	f000 f9fd 	bl	8000ddc <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009e2:	201c      	movs	r0, #28
 80009e4:	f000 f9b5 	bl	8000d52 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	210f      	movs	r1, #15
 80009ec:	201c      	movs	r0, #28
 80009ee:	f000 f994 	bl	8000d1a <HAL_NVIC_SetPriority>

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	@ 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020400 	.word	0x40020400

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a30:	f7ff ffea 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	@ (8000a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f002 f999 	bl	8002d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fd5b 	bl	8000518 <main>
  bx  lr    
 8000a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a70:	08002e18 	.word	0x08002e18
  ldr r2, =_sbss
 8000a74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a78:	200000d0 	.word	0x200000d0

08000a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <HAL_Init+0x40>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <HAL_Init+0x40>)
 8000a96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	@ (8000ac0 <HAL_Init+0x40>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f92b 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 f808 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff fedc 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f943 	bl	8000d6e <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 f90b 	bl	8000d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	200000cc 	.word	0x200000cc

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200000cc 	.word	0x200000cc

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4907      	ldr	r1, [pc, #28]	@ (8000c00 <__NVIC_EnableIRQ+0x38>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	@ (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	@ (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	@ 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	@ 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd0:	d301      	bcc.n	8000cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00f      	b.n	8000cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <SysTick_Config+0x40>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cde:	210f      	movs	r1, #15
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f7ff ff8e 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <SysTick_Config+0x40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <SysTick_Config+0x40>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff29 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2c:	f7ff ff3e 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff ff8e 	bl	8000c58 <NVIC_EncodePriority>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff5d 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff31 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ffa2 	bl	8000cc0 <SysTick_Config>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d106      	bne.n	8000da4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a08      	ldr	r2, [pc, #32]	@ (8000dbc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000da2:	e005      	b.n	8000db0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000da4:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000daa:	f023 0304 	bic.w	r3, r3, #4
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000dc4:	f000 f802 	bl	8000dcc <HAL_SYSTICK_Callback>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	e165      	b.n	80010c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f040 8154 	bne.w	80010be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d005      	beq.n	8000e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d130      	bne.n	8000e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	f003 0201 	and.w	r2, r3, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d017      	beq.n	8000ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d123      	bne.n	8000f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	69b9      	ldr	r1, [r7, #24]
 8000f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0203 	and.w	r2, r3, #3
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80ae 	beq.w	80010be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b5d      	ldr	r3, [pc, #372]	@ (80010dc <HAL_GPIO_Init+0x300>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	4a5c      	ldr	r2, [pc, #368]	@ (80010dc <HAL_GPIO_Init+0x300>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f72:	4b5a      	ldr	r3, [pc, #360]	@ (80010dc <HAL_GPIO_Init+0x300>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7e:	4a58      	ldr	r2, [pc, #352]	@ (80010e0 <HAL_GPIO_Init+0x304>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4f      	ldr	r2, [pc, #316]	@ (80010e4 <HAL_GPIO_Init+0x308>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d025      	beq.n	8000ff6 <HAL_GPIO_Init+0x21a>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4e      	ldr	r2, [pc, #312]	@ (80010e8 <HAL_GPIO_Init+0x30c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d01f      	beq.n	8000ff2 <HAL_GPIO_Init+0x216>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80010ec <HAL_GPIO_Init+0x310>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x212>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4c      	ldr	r2, [pc, #304]	@ (80010f0 <HAL_GPIO_Init+0x314>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x20e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4b      	ldr	r2, [pc, #300]	@ (80010f4 <HAL_GPIO_Init+0x318>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x20a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	@ (80010f8 <HAL_GPIO_Init+0x31c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x206>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a49      	ldr	r2, [pc, #292]	@ (80010fc <HAL_GPIO_Init+0x320>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x202>
 8000fda:	2306      	movs	r3, #6
 8000fdc:	e00c      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000fde:	2307      	movs	r3, #7
 8000fe0:	e00a      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	e008      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x21c>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	69fa      	ldr	r2, [r7, #28]
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4093      	lsls	r3, r2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001008:	4935      	ldr	r1, [pc, #212]	@ (80010e0 <HAL_GPIO_Init+0x304>)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001016:	4b3a      	ldr	r3, [pc, #232]	@ (8001100 <HAL_GPIO_Init+0x324>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800103a:	4a31      	ldr	r2, [pc, #196]	@ (8001100 <HAL_GPIO_Init+0x324>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001040:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <HAL_GPIO_Init+0x324>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001064:	4a26      	ldr	r2, [pc, #152]	@ (8001100 <HAL_GPIO_Init+0x324>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800106a:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <HAL_GPIO_Init+0x324>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800108e:	4a1c      	ldr	r2, [pc, #112]	@ (8001100 <HAL_GPIO_Init+0x324>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <HAL_GPIO_Init+0x324>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b8:	4a11      	ldr	r2, [pc, #68]	@ (8001100 <HAL_GPIO_Init+0x324>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	f67f ae96 	bls.w	8000df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3724      	adds	r7, #36	@ 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40021400 	.word	0x40021400
 80010fc:	40021800 	.word	0x40021800
 8001100:	40013c00 	.word	0x40013c00

08001104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e0cc      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001118:	4b68      	ldr	r3, [pc, #416]	@ (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d90c      	bls.n	8001140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001126:	4b65      	ldr	r3, [pc, #404]	@ (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800112e:	4b63      	ldr	r3, [pc, #396]	@ (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d001      	beq.n	8001140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e0b8      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001158:	4b59      	ldr	r3, [pc, #356]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	4a58      	ldr	r2, [pc, #352]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001162:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001170:	4b53      	ldr	r3, [pc, #332]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	4a52      	ldr	r2, [pc, #328]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800117a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800117c:	4b50      	ldr	r3, [pc, #320]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	494d      	ldr	r1, [pc, #308]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d044      	beq.n	8001224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b47      	ldr	r3, [pc, #284]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d119      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e07f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d003      	beq.n	80011c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d107      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c2:	4b3f      	ldr	r3, [pc, #252]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e06f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d2:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e067      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011e2:	4b37      	ldr	r3, [pc, #220]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f023 0203 	bic.w	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	4934      	ldr	r1, [pc, #208]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f4:	f7ff fcaa 	bl	8000b4c <HAL_GetTick>
 80011f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fa:	e00a      	b.n	8001212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011fc:	f7ff fca6 	bl	8000b4c <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800120a:	4293      	cmp	r3, r2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e04f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001212:	4b2b      	ldr	r3, [pc, #172]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 020c 	and.w	r2, r3, #12
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	429a      	cmp	r2, r3
 8001222:	d1eb      	bne.n	80011fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001224:	4b25      	ldr	r3, [pc, #148]	@ (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d20c      	bcs.n	800124c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800123a:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e032      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001258:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4916      	ldr	r1, [pc, #88]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	4313      	orrs	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	490e      	ldr	r1, [pc, #56]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	4313      	orrs	r3, r2
 8001288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800128a:	f000 f855 	bl	8001338 <HAL_RCC_GetSysClockFreq>
 800128e:	4602      	mov	r2, r0
 8001290:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	490a      	ldr	r1, [pc, #40]	@ (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 800129c:	5ccb      	ldrb	r3, [r1, r3]
 800129e:	fa22 f303 	lsr.w	r3, r2, r3
 80012a2:	4a09      	ldr	r2, [pc, #36]	@ (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <HAL_RCC_ClockConfig+0x1c8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fc0a 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00
 80012c0:	40023800 	.word	0x40023800
 80012c4:	08002df0 	.word	0x08002df0
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000

080012e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012ec:	f7ff fff0 	bl	80012d0 <HAL_RCC_GetHCLKFreq>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	0a9b      	lsrs	r3, r3, #10
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	4903      	ldr	r1, [pc, #12]	@ (800130c <HAL_RCC_GetPCLK1Freq+0x24>)
 80012fe:	5ccb      	ldrb	r3, [r1, r3]
 8001300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001304:	4618      	mov	r0, r3
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	08002e00 	.word	0x08002e00

08001310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001314:	f7ff ffdc 	bl	80012d0 <HAL_RCC_GetHCLKFreq>
 8001318:	4602      	mov	r2, r0
 800131a:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	0b5b      	lsrs	r3, r3, #13
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	4903      	ldr	r1, [pc, #12]	@ (8001334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001326:	5ccb      	ldrb	r3, [r1, r3]
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800132c:	4618      	mov	r0, r3
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	08002e00 	.word	0x08002e00

08001338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800133c:	b0ae      	sub	sp, #184	@ 0xb8
 800133e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800135e:	4bcb      	ldr	r3, [pc, #812]	@ (800168c <HAL_RCC_GetSysClockFreq+0x354>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b0c      	cmp	r3, #12
 8001368:	f200 8206 	bhi.w	8001778 <HAL_RCC_GetSysClockFreq+0x440>
 800136c:	a201      	add	r2, pc, #4	@ (adr r2, 8001374 <HAL_RCC_GetSysClockFreq+0x3c>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	080013a9 	.word	0x080013a9
 8001378:	08001779 	.word	0x08001779
 800137c:	08001779 	.word	0x08001779
 8001380:	08001779 	.word	0x08001779
 8001384:	080013b1 	.word	0x080013b1
 8001388:	08001779 	.word	0x08001779
 800138c:	08001779 	.word	0x08001779
 8001390:	08001779 	.word	0x08001779
 8001394:	080013b9 	.word	0x080013b9
 8001398:	08001779 	.word	0x08001779
 800139c:	08001779 	.word	0x08001779
 80013a0:	08001779 	.word	0x08001779
 80013a4:	080015a9 	.word	0x080015a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013a8:	4bb9      	ldr	r3, [pc, #740]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x358>)
 80013aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013ae:	e1e7      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013b0:	4bb8      	ldr	r3, [pc, #736]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013b6:	e1e3      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b8:	4bb4      	ldr	r3, [pc, #720]	@ (800168c <HAL_RCC_GetSysClockFreq+0x354>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013c4:	4bb1      	ldr	r3, [pc, #708]	@ (800168c <HAL_RCC_GetSysClockFreq+0x354>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d071      	beq.n	80014b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d0:	4bae      	ldr	r3, [pc, #696]	@ (800168c <HAL_RCC_GetSysClockFreq+0x354>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	2200      	movs	r2, #0
 80013d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80013e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80013f6:	4622      	mov	r2, r4
 80013f8:	462b      	mov	r3, r5
 80013fa:	f04f 0000 	mov.w	r0, #0
 80013fe:	f04f 0100 	mov.w	r1, #0
 8001402:	0159      	lsls	r1, r3, #5
 8001404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001408:	0150      	lsls	r0, r2, #5
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4621      	mov	r1, r4
 8001410:	1a51      	subs	r1, r2, r1
 8001412:	6439      	str	r1, [r7, #64]	@ 0x40
 8001414:	4629      	mov	r1, r5
 8001416:	eb63 0301 	sbc.w	r3, r3, r1
 800141a:	647b      	str	r3, [r7, #68]	@ 0x44
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001428:	4649      	mov	r1, r9
 800142a:	018b      	lsls	r3, r1, #6
 800142c:	4641      	mov	r1, r8
 800142e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001432:	4641      	mov	r1, r8
 8001434:	018a      	lsls	r2, r1, #6
 8001436:	4641      	mov	r1, r8
 8001438:	1a51      	subs	r1, r2, r1
 800143a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800143c:	4649      	mov	r1, r9
 800143e:	eb63 0301 	sbc.w	r3, r3, r1
 8001442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001450:	4649      	mov	r1, r9
 8001452:	00cb      	lsls	r3, r1, #3
 8001454:	4641      	mov	r1, r8
 8001456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800145a:	4641      	mov	r1, r8
 800145c:	00ca      	lsls	r2, r1, #3
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	4603      	mov	r3, r0
 8001464:	4622      	mov	r2, r4
 8001466:	189b      	adds	r3, r3, r2
 8001468:	633b      	str	r3, [r7, #48]	@ 0x30
 800146a:	462b      	mov	r3, r5
 800146c:	460a      	mov	r2, r1
 800146e:	eb42 0303 	adc.w	r3, r2, r3
 8001472:	637b      	str	r3, [r7, #52]	@ 0x34
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001480:	4629      	mov	r1, r5
 8001482:	024b      	lsls	r3, r1, #9
 8001484:	4621      	mov	r1, r4
 8001486:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800148a:	4621      	mov	r1, r4
 800148c:	024a      	lsls	r2, r1, #9
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001496:	2200      	movs	r2, #0
 8001498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800149c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80014a4:	f7fe feae 	bl	8000204 <__aeabi_uldivmod>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4613      	mov	r3, r2
 80014ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014b2:	e067      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b4:	4b75      	ldr	r3, [pc, #468]	@ (800168c <HAL_RCC_GetSysClockFreq+0x354>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	099b      	lsrs	r3, r3, #6
 80014ba:	2200      	movs	r2, #0
 80014bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014ce:	2300      	movs	r3, #0
 80014d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014d6:	4622      	mov	r2, r4
 80014d8:	462b      	mov	r3, r5
 80014da:	f04f 0000 	mov.w	r0, #0
 80014de:	f04f 0100 	mov.w	r1, #0
 80014e2:	0159      	lsls	r1, r3, #5
 80014e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014e8:	0150      	lsls	r0, r2, #5
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4621      	mov	r1, r4
 80014f0:	1a51      	subs	r1, r2, r1
 80014f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80014f4:	4629      	mov	r1, r5
 80014f6:	eb63 0301 	sbc.w	r3, r3, r1
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001508:	4649      	mov	r1, r9
 800150a:	018b      	lsls	r3, r1, #6
 800150c:	4641      	mov	r1, r8
 800150e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001512:	4641      	mov	r1, r8
 8001514:	018a      	lsls	r2, r1, #6
 8001516:	4641      	mov	r1, r8
 8001518:	ebb2 0a01 	subs.w	sl, r2, r1
 800151c:	4649      	mov	r1, r9
 800151e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800152e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001532:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001536:	4692      	mov	sl, r2
 8001538:	469b      	mov	fp, r3
 800153a:	4623      	mov	r3, r4
 800153c:	eb1a 0303 	adds.w	r3, sl, r3
 8001540:	623b      	str	r3, [r7, #32]
 8001542:	462b      	mov	r3, r5
 8001544:	eb4b 0303 	adc.w	r3, fp, r3
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001556:	4629      	mov	r1, r5
 8001558:	028b      	lsls	r3, r1, #10
 800155a:	4621      	mov	r1, r4
 800155c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001560:	4621      	mov	r1, r4
 8001562:	028a      	lsls	r2, r1, #10
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800156c:	2200      	movs	r2, #0
 800156e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001570:	677a      	str	r2, [r7, #116]	@ 0x74
 8001572:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001576:	f7fe fe45 	bl	8000204 <__aeabi_uldivmod>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4613      	mov	r3, r2
 8001580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001584:	4b41      	ldr	r3, [pc, #260]	@ (800168c <HAL_RCC_GetSysClockFreq+0x354>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	3301      	adds	r3, #1
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001596:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800159a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015a6:	e0eb      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a8:	4b38      	ldr	r3, [pc, #224]	@ (800168c <HAL_RCC_GetSysClockFreq+0x354>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015b4:	4b35      	ldr	r3, [pc, #212]	@ (800168c <HAL_RCC_GetSysClockFreq+0x354>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d06b      	beq.n	8001698 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c0:	4b32      	ldr	r3, [pc, #200]	@ (800168c <HAL_RCC_GetSysClockFreq+0x354>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	099b      	lsrs	r3, r3, #6
 80015c6:	2200      	movs	r2, #0
 80015c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80015d4:	2300      	movs	r3, #0
 80015d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80015d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015dc:	4622      	mov	r2, r4
 80015de:	462b      	mov	r3, r5
 80015e0:	f04f 0000 	mov.w	r0, #0
 80015e4:	f04f 0100 	mov.w	r1, #0
 80015e8:	0159      	lsls	r1, r3, #5
 80015ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015ee:	0150      	lsls	r0, r2, #5
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4621      	mov	r1, r4
 80015f6:	1a51      	subs	r1, r2, r1
 80015f8:	61b9      	str	r1, [r7, #24]
 80015fa:	4629      	mov	r1, r5
 80015fc:	eb63 0301 	sbc.w	r3, r3, r1
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800160e:	4659      	mov	r1, fp
 8001610:	018b      	lsls	r3, r1, #6
 8001612:	4651      	mov	r1, sl
 8001614:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001618:	4651      	mov	r1, sl
 800161a:	018a      	lsls	r2, r1, #6
 800161c:	4651      	mov	r1, sl
 800161e:	ebb2 0801 	subs.w	r8, r2, r1
 8001622:	4659      	mov	r1, fp
 8001624:	eb63 0901 	sbc.w	r9, r3, r1
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001634:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001638:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800163c:	4690      	mov	r8, r2
 800163e:	4699      	mov	r9, r3
 8001640:	4623      	mov	r3, r4
 8001642:	eb18 0303 	adds.w	r3, r8, r3
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	462b      	mov	r3, r5
 800164a:	eb49 0303 	adc.w	r3, r9, r3
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800165c:	4629      	mov	r1, r5
 800165e:	024b      	lsls	r3, r1, #9
 8001660:	4621      	mov	r1, r4
 8001662:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001666:	4621      	mov	r1, r4
 8001668:	024a      	lsls	r2, r1, #9
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001672:	2200      	movs	r2, #0
 8001674:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001676:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001678:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800167c:	f7fe fdc2 	bl	8000204 <__aeabi_uldivmod>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4613      	mov	r3, r2
 8001686:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800168a:	e065      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x420>
 800168c:	40023800 	.word	0x40023800
 8001690:	00f42400 	.word	0x00f42400
 8001694:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001698:	4b3d      	ldr	r3, [pc, #244]	@ (8001790 <HAL_RCC_GetSysClockFreq+0x458>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	2200      	movs	r2, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	4611      	mov	r1, r2
 80016a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80016aa:	2300      	movs	r3, #0
 80016ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80016ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016b2:	4642      	mov	r2, r8
 80016b4:	464b      	mov	r3, r9
 80016b6:	f04f 0000 	mov.w	r0, #0
 80016ba:	f04f 0100 	mov.w	r1, #0
 80016be:	0159      	lsls	r1, r3, #5
 80016c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c4:	0150      	lsls	r0, r2, #5
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4641      	mov	r1, r8
 80016cc:	1a51      	subs	r1, r2, r1
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	4649      	mov	r1, r9
 80016d2:	eb63 0301 	sbc.w	r3, r3, r1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016e4:	4659      	mov	r1, fp
 80016e6:	018b      	lsls	r3, r1, #6
 80016e8:	4651      	mov	r1, sl
 80016ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ee:	4651      	mov	r1, sl
 80016f0:	018a      	lsls	r2, r1, #6
 80016f2:	4651      	mov	r1, sl
 80016f4:	1a54      	subs	r4, r2, r1
 80016f6:	4659      	mov	r1, fp
 80016f8:	eb63 0501 	sbc.w	r5, r3, r1
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	00eb      	lsls	r3, r5, #3
 8001706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800170a:	00e2      	lsls	r2, r4, #3
 800170c:	4614      	mov	r4, r2
 800170e:	461d      	mov	r5, r3
 8001710:	4643      	mov	r3, r8
 8001712:	18e3      	adds	r3, r4, r3
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	464b      	mov	r3, r9
 8001718:	eb45 0303 	adc.w	r3, r5, r3
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 4500 	ldrd	r4, r5, [r7]
 800172a:	4629      	mov	r1, r5
 800172c:	028b      	lsls	r3, r1, #10
 800172e:	4621      	mov	r1, r4
 8001730:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001734:	4621      	mov	r1, r4
 8001736:	028a      	lsls	r2, r1, #10
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001740:	2200      	movs	r2, #0
 8001742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001744:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001746:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800174a:	f7fe fd5b 	bl	8000204 <__aeabi_uldivmod>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4613      	mov	r3, r2
 8001754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001758:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <HAL_RCC_GetSysClockFreq+0x458>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	0f1b      	lsrs	r3, r3, #28
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800176a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001776:	e003      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x45c>)
 800177a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800177e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001780:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001784:	4618      	mov	r0, r3
 8001786:	37b8      	adds	r7, #184	@ 0xb8
 8001788:	46bd      	mov	sp, r7
 800178a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	00f42400 	.word	0x00f42400

08001798 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e28d      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8083 	beq.w	80018be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017b8:	4b94      	ldr	r3, [pc, #592]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d019      	beq.n	80017f8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017c4:	4b91      	ldr	r3, [pc, #580]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
        || \
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017d0:	4b8e      	ldr	r3, [pc, #568]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017dc:	d00c      	beq.n	80017f8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017de:	4b8b      	ldr	r3, [pc, #556]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	d112      	bne.n	8001810 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ea:	4b88      	ldr	r3, [pc, #544]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017f6:	d10b      	bne.n	8001810 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f8:	4b84      	ldr	r3, [pc, #528]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d05b      	beq.n	80018bc <HAL_RCC_OscConfig+0x124>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d157      	bne.n	80018bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e25a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001818:	d106      	bne.n	8001828 <HAL_RCC_OscConfig+0x90>
 800181a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a7b      	ldr	r2, [pc, #492]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e01d      	b.n	8001864 <HAL_RCC_OscConfig+0xcc>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0xb4>
 8001832:	4b76      	ldr	r3, [pc, #472]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a75      	ldr	r2, [pc, #468]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 8001838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b73      	ldr	r3, [pc, #460]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a72      	ldr	r2, [pc, #456]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e00b      	b.n	8001864 <HAL_RCC_OscConfig+0xcc>
 800184c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a6e      	ldr	r2, [pc, #440]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 8001852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b6c      	ldr	r3, [pc, #432]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a6b      	ldr	r2, [pc, #428]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 800185e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff f96e 	bl	8000b4c <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff f96a 	bl	8000b4c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	@ 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e21f      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b61      	ldr	r3, [pc, #388]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0xdc>
 8001892:	e014      	b.n	80018be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff f95a 	bl	8000b4c <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff f956 	bl	8000b4c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	@ 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e20b      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	4b57      	ldr	r3, [pc, #348]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x104>
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d06f      	beq.n	80019aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018ca:	4b50      	ldr	r3, [pc, #320]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d017      	beq.n	8001906 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018d6:	4b4d      	ldr	r3, [pc, #308]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
        || \
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d105      	bne.n	80018ee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018e2:	4b4a      	ldr	r3, [pc, #296]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ee:	4b47      	ldr	r3, [pc, #284]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d11c      	bne.n	8001934 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fa:	4b44      	ldr	r3, [pc, #272]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d116      	bne.n	8001934 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	4b41      	ldr	r3, [pc, #260]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_RCC_OscConfig+0x186>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e1d3      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4937      	ldr	r1, [pc, #220]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	e03a      	b.n	80019aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4b34      	ldr	r3, [pc, #208]	@ (8001a10 <HAL_RCC_OscConfig+0x278>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff f903 	bl	8000b4c <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff f8ff 	bl	8000b4c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e1b4      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b28      	ldr	r3, [pc, #160]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4925      	ldr	r1, [pc, #148]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e015      	b.n	80019aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197e:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <HAL_RCC_OscConfig+0x278>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff f8e2 	bl	8000b4c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198c:	f7ff f8de 	bl	8000b4c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e193      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d036      	beq.n	8001a24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d016      	beq.n	80019ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <HAL_RCC_OscConfig+0x27c>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff f8c2 	bl	8000b4c <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff f8be 	bl	8000b4c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e173      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80019e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x234>
 80019ea:	e01b      	b.n	8001a24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_RCC_OscConfig+0x27c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff f8ab 	bl	8000b4c <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f8:	e00e      	b.n	8001a18 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fa:	f7ff f8a7 	bl	8000b4c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d907      	bls.n	8001a18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e15c      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	42470000 	.word	0x42470000
 8001a14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	4b8a      	ldr	r3, [pc, #552]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1ea      	bne.n	80019fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 8097 	beq.w	8001b60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b83      	ldr	r3, [pc, #524]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10f      	bne.n	8001a62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	4b7f      	ldr	r3, [pc, #508]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	4a7e      	ldr	r2, [pc, #504]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a52:	4b7c      	ldr	r3, [pc, #496]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a62:	4b79      	ldr	r3, [pc, #484]	@ (8001c48 <HAL_RCC_OscConfig+0x4b0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d118      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6e:	4b76      	ldr	r3, [pc, #472]	@ (8001c48 <HAL_RCC_OscConfig+0x4b0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a75      	ldr	r2, [pc, #468]	@ (8001c48 <HAL_RCC_OscConfig+0x4b0>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff f867 	bl	8000b4c <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a82:	f7ff f863 	bl	8000b4c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e118      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	4b6c      	ldr	r3, [pc, #432]	@ (8001c48 <HAL_RCC_OscConfig+0x4b0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x31e>
 8001aa8:	4b66      	ldr	r3, [pc, #408]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aac:	4a65      	ldr	r2, [pc, #404]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab4:	e01c      	b.n	8001af0 <HAL_RCC_OscConfig+0x358>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x340>
 8001abe:	4b61      	ldr	r3, [pc, #388]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac2:	4a60      	ldr	r2, [pc, #384]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aca:	4b5e      	ldr	r3, [pc, #376]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ace:	4a5d      	ldr	r2, [pc, #372]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0x358>
 8001ad8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001adc:	4a59      	ldr	r2, [pc, #356]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ae4:	4b57      	ldr	r3, [pc, #348]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae8:	4a56      	ldr	r2, [pc, #344]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001aea:	f023 0304 	bic.w	r3, r3, #4
 8001aee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d015      	beq.n	8001b24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f828 	bl	8000b4c <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff f824 	bl	8000b4c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e0d7      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b16:	4b4b      	ldr	r3, [pc, #300]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0ee      	beq.n	8001b00 <HAL_RCC_OscConfig+0x368>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff f812 	bl	8000b4c <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f80e 	bl	8000b4c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e0c1      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b42:	4b40      	ldr	r3, [pc, #256]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1ee      	bne.n	8001b2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b54:	4b3b      	ldr	r3, [pc, #236]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	4a3a      	ldr	r2, [pc, #232]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80ad 	beq.w	8001cc4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b6a:	4b36      	ldr	r3, [pc, #216]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d060      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d145      	bne.n	8001c0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	4b33      	ldr	r3, [pc, #204]	@ (8001c4c <HAL_RCC_OscConfig+0x4b4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7fe ffe2 	bl	8000b4c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7fe ffde 	bl	8000b4c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e093      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69da      	ldr	r2, [r3, #28]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	019b      	lsls	r3, r3, #6
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	085b      	lsrs	r3, r3, #1
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	041b      	lsls	r3, r3, #16
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bcc:	061b      	lsls	r3, r3, #24
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd4:	071b      	lsls	r3, r3, #28
 8001bd6:	491b      	ldr	r1, [pc, #108]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <HAL_RCC_OscConfig+0x4b4>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7fe ffb3 	bl	8000b4c <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bea:	f7fe ffaf 	bl	8000b4c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e064      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x452>
 8001c08:	e05c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <HAL_RCC_OscConfig+0x4b4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7fe ff9c 	bl	8000b4c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7fe ff98 	bl	8000b4c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e04d      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x480>
 8001c36:	e045      	b.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d107      	bne.n	8001c50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e040      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40007000 	.word	0x40007000
 8001c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c50:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd0 <HAL_RCC_OscConfig+0x538>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d030      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d129      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d122      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c80:	4013      	ands	r3, r2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d119      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d10f      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e041      	b.n	8001d6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe fe22 	bl	8000944 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f000 fada 	bl	80022cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_TIM_PWM_Start+0x24>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	bf14      	ite	ne
 8001d90:	2301      	movne	r3, #1
 8001d92:	2300      	moveq	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	e022      	b.n	8001dde <HAL_TIM_PWM_Start+0x6a>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d109      	bne.n	8001db2 <HAL_TIM_PWM_Start+0x3e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	e015      	b.n	8001dde <HAL_TIM_PWM_Start+0x6a>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d109      	bne.n	8001dcc <HAL_TIM_PWM_Start+0x58>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e008      	b.n	8001dde <HAL_TIM_PWM_Start+0x6a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	bf14      	ite	ne
 8001dd8:	2301      	movne	r3, #1
 8001dda:	2300      	moveq	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e07c      	b.n	8001ee0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d104      	bne.n	8001df6 <HAL_TIM_PWM_Start+0x82>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001df4:	e013      	b.n	8001e1e <HAL_TIM_PWM_Start+0xaa>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d104      	bne.n	8001e06 <HAL_TIM_PWM_Start+0x92>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e04:	e00b      	b.n	8001e1e <HAL_TIM_PWM_Start+0xaa>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d104      	bne.n	8001e16 <HAL_TIM_PWM_Start+0xa2>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e14:	e003      	b.n	8001e1e <HAL_TIM_PWM_Start+0xaa>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2201      	movs	r2, #1
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fcac 	bl	8002784 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee8 <HAL_TIM_PWM_Start+0x174>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d004      	beq.n	8001e40 <HAL_TIM_PWM_Start+0xcc>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001eec <HAL_TIM_PWM_Start+0x178>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d101      	bne.n	8001e44 <HAL_TIM_PWM_Start+0xd0>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <HAL_TIM_PWM_Start+0xd2>
 8001e44:	2300      	movs	r3, #0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a22      	ldr	r2, [pc, #136]	@ (8001ee8 <HAL_TIM_PWM_Start+0x174>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d022      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x136>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e6c:	d01d      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x136>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef0 <HAL_TIM_PWM_Start+0x17c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d018      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x136>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef4 <HAL_TIM_PWM_Start+0x180>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x136>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef8 <HAL_TIM_PWM_Start+0x184>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00e      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x136>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a16      	ldr	r2, [pc, #88]	@ (8001eec <HAL_TIM_PWM_Start+0x178>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x136>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a18      	ldr	r2, [pc, #96]	@ (8001efc <HAL_TIM_PWM_Start+0x188>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d004      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x136>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a16      	ldr	r2, [pc, #88]	@ (8001f00 <HAL_TIM_PWM_Start+0x18c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d111      	bne.n	8001ece <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d010      	beq.n	8001ede <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ecc:	e007      	b.n	8001ede <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40010400 	.word	0x40010400
 8001ef0:	40000400 	.word	0x40000400
 8001ef4:	40000800 	.word	0x40000800
 8001ef8:	40000c00 	.word	0x40000c00
 8001efc:	40014000 	.word	0x40014000
 8001f00:	40001800 	.word	0x40001800

08001f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d020      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01b      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0202 	mvn.w	r2, #2
 8001f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f99e 	bl	8002290 <HAL_TIM_IC_CaptureCallback>
 8001f54:	e005      	b.n	8001f62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f990 	bl	800227c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f9a1 	bl	80022a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d020      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01b      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0204 	mvn.w	r2, #4
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f978 	bl	8002290 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f96a 	bl	800227c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f97b 	bl	80022a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d020      	beq.n	8002000 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0208 	mvn.w	r2, #8
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f952 	bl	8002290 <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f944 	bl	800227c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f955 	bl	80022a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d020      	beq.n	800204c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01b      	beq.n	800204c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0210 	mvn.w	r2, #16
 800201c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2208      	movs	r2, #8
 8002022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f92c 	bl	8002290 <HAL_TIM_IC_CaptureCallback>
 8002038:	e005      	b.n	8002046 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f91e 	bl	800227c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f92f 	bl	80022a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00c      	beq.n	8002070 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0201 	mvn.w	r2, #1
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8fc 	bl	8002268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800208c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fba7 	bl	80027e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00c      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f900 	bl	80022b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00c      	beq.n	80020dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0220 	mvn.w	r2, #32
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fb79 	bl	80027ce <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020fe:	2302      	movs	r3, #2
 8002100:	e0ae      	b.n	8002260 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0c      	cmp	r3, #12
 800210e:	f200 809f 	bhi.w	8002250 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002112:	a201      	add	r2, pc, #4	@ (adr r2, 8002118 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	0800214d 	.word	0x0800214d
 800211c:	08002251 	.word	0x08002251
 8002120:	08002251 	.word	0x08002251
 8002124:	08002251 	.word	0x08002251
 8002128:	0800218d 	.word	0x0800218d
 800212c:	08002251 	.word	0x08002251
 8002130:	08002251 	.word	0x08002251
 8002134:	08002251 	.word	0x08002251
 8002138:	080021cf 	.word	0x080021cf
 800213c:	08002251 	.word	0x08002251
 8002140:	08002251 	.word	0x08002251
 8002144:	08002251 	.word	0x08002251
 8002148:	0800220f 	.word	0x0800220f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f966 	bl	8002424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0208 	orr.w	r2, r2, #8
 8002166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0204 	bic.w	r2, r2, #4
 8002176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6999      	ldr	r1, [r3, #24]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	619a      	str	r2, [r3, #24]
      break;
 800218a:	e064      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f9b6 	bl	8002504 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6999      	ldr	r1, [r3, #24]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	021a      	lsls	r2, r3, #8
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	619a      	str	r2, [r3, #24]
      break;
 80021cc:	e043      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fa0b 	bl	80025f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0208 	orr.w	r2, r2, #8
 80021e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0204 	bic.w	r2, r2, #4
 80021f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69d9      	ldr	r1, [r3, #28]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	61da      	str	r2, [r3, #28]
      break;
 800220c:	e023      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fa5f 	bl	80026d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69d9      	ldr	r1, [r3, #28]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	021a      	lsls	r2, r3, #8
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	61da      	str	r2, [r3, #28]
      break;
 800224e:	e002      	b.n	8002256 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	75fb      	strb	r3, [r7, #23]
      break;
 8002254:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800225e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a46      	ldr	r2, [pc, #280]	@ (80023f8 <TIM_Base_SetConfig+0x12c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d013      	beq.n	800230c <TIM_Base_SetConfig+0x40>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ea:	d00f      	beq.n	800230c <TIM_Base_SetConfig+0x40>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a43      	ldr	r2, [pc, #268]	@ (80023fc <TIM_Base_SetConfig+0x130>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00b      	beq.n	800230c <TIM_Base_SetConfig+0x40>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a42      	ldr	r2, [pc, #264]	@ (8002400 <TIM_Base_SetConfig+0x134>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d007      	beq.n	800230c <TIM_Base_SetConfig+0x40>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a41      	ldr	r2, [pc, #260]	@ (8002404 <TIM_Base_SetConfig+0x138>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d003      	beq.n	800230c <TIM_Base_SetConfig+0x40>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a40      	ldr	r2, [pc, #256]	@ (8002408 <TIM_Base_SetConfig+0x13c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a35      	ldr	r2, [pc, #212]	@ (80023f8 <TIM_Base_SetConfig+0x12c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d02b      	beq.n	800237e <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800232c:	d027      	beq.n	800237e <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a32      	ldr	r2, [pc, #200]	@ (80023fc <TIM_Base_SetConfig+0x130>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d023      	beq.n	800237e <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a31      	ldr	r2, [pc, #196]	@ (8002400 <TIM_Base_SetConfig+0x134>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01f      	beq.n	800237e <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a30      	ldr	r2, [pc, #192]	@ (8002404 <TIM_Base_SetConfig+0x138>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01b      	beq.n	800237e <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a2f      	ldr	r2, [pc, #188]	@ (8002408 <TIM_Base_SetConfig+0x13c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d017      	beq.n	800237e <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a2e      	ldr	r2, [pc, #184]	@ (800240c <TIM_Base_SetConfig+0x140>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a2d      	ldr	r2, [pc, #180]	@ (8002410 <TIM_Base_SetConfig+0x144>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00f      	beq.n	800237e <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2c      	ldr	r2, [pc, #176]	@ (8002414 <TIM_Base_SetConfig+0x148>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00b      	beq.n	800237e <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a2b      	ldr	r2, [pc, #172]	@ (8002418 <TIM_Base_SetConfig+0x14c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a2a      	ldr	r2, [pc, #168]	@ (800241c <TIM_Base_SetConfig+0x150>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d003      	beq.n	800237e <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a29      	ldr	r2, [pc, #164]	@ (8002420 <TIM_Base_SetConfig+0x154>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d108      	bne.n	8002390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4313      	orrs	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a10      	ldr	r2, [pc, #64]	@ (80023f8 <TIM_Base_SetConfig+0x12c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d003      	beq.n	80023c4 <TIM_Base_SetConfig+0xf8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a12      	ldr	r2, [pc, #72]	@ (8002408 <TIM_Base_SetConfig+0x13c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d103      	bne.n	80023cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d105      	bne.n	80023ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f023 0201 	bic.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]
  }
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40000400 	.word	0x40000400
 8002400:	40000800 	.word	0x40000800
 8002404:	40000c00 	.word	0x40000c00
 8002408:	40010400 	.word	0x40010400
 800240c:	40014000 	.word	0x40014000
 8002410:	40014400 	.word	0x40014400
 8002414:	40014800 	.word	0x40014800
 8002418:	40001800 	.word	0x40001800
 800241c:	40001c00 	.word	0x40001c00
 8002420:	40002000 	.word	0x40002000

08002424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f023 0201 	bic.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f023 0302 	bic.w	r3, r3, #2
 800246c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a20      	ldr	r2, [pc, #128]	@ (80024fc <TIM_OC1_SetConfig+0xd8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d003      	beq.n	8002488 <TIM_OC1_SetConfig+0x64>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a1f      	ldr	r2, [pc, #124]	@ (8002500 <TIM_OC1_SetConfig+0xdc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d10c      	bne.n	80024a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f023 0308 	bic.w	r3, r3, #8
 800248e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a15      	ldr	r2, [pc, #84]	@ (80024fc <TIM_OC1_SetConfig+0xd8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d003      	beq.n	80024b2 <TIM_OC1_SetConfig+0x8e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a14      	ldr	r2, [pc, #80]	@ (8002500 <TIM_OC1_SetConfig+0xdc>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d111      	bne.n	80024d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	621a      	str	r2, [r3, #32]
}
 80024f0:	bf00      	nop
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40010000 	.word	0x40010000
 8002500:	40010400 	.word	0x40010400

08002504 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f023 0210 	bic.w	r2, r3, #16
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800253a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f023 0320 	bic.w	r3, r3, #32
 800254e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a22      	ldr	r2, [pc, #136]	@ (80025e8 <TIM_OC2_SetConfig+0xe4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d003      	beq.n	800256c <TIM_OC2_SetConfig+0x68>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a21      	ldr	r2, [pc, #132]	@ (80025ec <TIM_OC2_SetConfig+0xe8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d10d      	bne.n	8002588 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002586:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a17      	ldr	r2, [pc, #92]	@ (80025e8 <TIM_OC2_SetConfig+0xe4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d003      	beq.n	8002598 <TIM_OC2_SetConfig+0x94>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a16      	ldr	r2, [pc, #88]	@ (80025ec <TIM_OC2_SetConfig+0xe8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d113      	bne.n	80025c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800259e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80025a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	621a      	str	r2, [r3, #32]
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40010000 	.word	0x40010000
 80025ec:	40010400 	.word	0x40010400

080025f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800261e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0303 	bic.w	r3, r3, #3
 8002626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a21      	ldr	r2, [pc, #132]	@ (80026d0 <TIM_OC3_SetConfig+0xe0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d003      	beq.n	8002656 <TIM_OC3_SetConfig+0x66>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a20      	ldr	r2, [pc, #128]	@ (80026d4 <TIM_OC3_SetConfig+0xe4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10d      	bne.n	8002672 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800265c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a16      	ldr	r2, [pc, #88]	@ (80026d0 <TIM_OC3_SetConfig+0xe0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d003      	beq.n	8002682 <TIM_OC3_SetConfig+0x92>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a15      	ldr	r2, [pc, #84]	@ (80026d4 <TIM_OC3_SetConfig+0xe4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d113      	bne.n	80026aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	621a      	str	r2, [r3, #32]
}
 80026c4:	bf00      	nop
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40010000 	.word	0x40010000
 80026d4:	40010400 	.word	0x40010400

080026d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800270e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	031b      	lsls	r3, r3, #12
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a12      	ldr	r2, [pc, #72]	@ (800277c <TIM_OC4_SetConfig+0xa4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d003      	beq.n	8002740 <TIM_OC4_SetConfig+0x68>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a11      	ldr	r2, [pc, #68]	@ (8002780 <TIM_OC4_SetConfig+0xa8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d109      	bne.n	8002754 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	019b      	lsls	r3, r3, #6
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	621a      	str	r2, [r3, #32]
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40010000 	.word	0x40010000
 8002780:	40010400 	.word	0x40010400

08002784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2201      	movs	r2, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a1a      	ldr	r2, [r3, #32]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	401a      	ands	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a1a      	ldr	r2, [r3, #32]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	431a      	orrs	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	621a      	str	r2, [r3, #32]
}
 80027c2:	bf00      	nop
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e042      	b.n	800288e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d106      	bne.n	8002822 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7fe f849 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2224      	movs	r2, #36	@ 0x24
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002838:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f82c 	bl	8002898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800284e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800285e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800286e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800289c:	b0c0      	sub	sp, #256	@ 0x100
 800289e:	af00      	add	r7, sp, #0
 80028a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	68d9      	ldr	r1, [r3, #12]
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	ea40 0301 	orr.w	r3, r0, r1
 80028c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028f0:	f021 010c 	bic.w	r1, r1, #12
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028fe:	430b      	orrs	r3, r1
 8002900:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002912:	6999      	ldr	r1, [r3, #24]
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	ea40 0301 	orr.w	r3, r0, r1
 800291e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b8f      	ldr	r3, [pc, #572]	@ (8002b64 <UART_SetConfig+0x2cc>)
 8002928:	429a      	cmp	r2, r3
 800292a:	d005      	beq.n	8002938 <UART_SetConfig+0xa0>
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b8d      	ldr	r3, [pc, #564]	@ (8002b68 <UART_SetConfig+0x2d0>)
 8002934:	429a      	cmp	r2, r3
 8002936:	d104      	bne.n	8002942 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002938:	f7fe fcea 	bl	8001310 <HAL_RCC_GetPCLK2Freq>
 800293c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002940:	e003      	b.n	800294a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002942:	f7fe fcd1 	bl	80012e8 <HAL_RCC_GetPCLK1Freq>
 8002946:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002954:	f040 810c 	bne.w	8002b70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800295c:	2200      	movs	r2, #0
 800295e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002962:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002966:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800296a:	4622      	mov	r2, r4
 800296c:	462b      	mov	r3, r5
 800296e:	1891      	adds	r1, r2, r2
 8002970:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002972:	415b      	adcs	r3, r3
 8002974:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002976:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800297a:	4621      	mov	r1, r4
 800297c:	eb12 0801 	adds.w	r8, r2, r1
 8002980:	4629      	mov	r1, r5
 8002982:	eb43 0901 	adc.w	r9, r3, r1
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800299a:	4690      	mov	r8, r2
 800299c:	4699      	mov	r9, r3
 800299e:	4623      	mov	r3, r4
 80029a0:	eb18 0303 	adds.w	r3, r8, r3
 80029a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029a8:	462b      	mov	r3, r5
 80029aa:	eb49 0303 	adc.w	r3, r9, r3
 80029ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029c6:	460b      	mov	r3, r1
 80029c8:	18db      	adds	r3, r3, r3
 80029ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80029cc:	4613      	mov	r3, r2
 80029ce:	eb42 0303 	adc.w	r3, r2, r3
 80029d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80029d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029dc:	f7fd fc12 	bl	8000204 <__aeabi_uldivmod>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4b61      	ldr	r3, [pc, #388]	@ (8002b6c <UART_SetConfig+0x2d4>)
 80029e6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	011c      	lsls	r4, r3, #4
 80029ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a00:	4642      	mov	r2, r8
 8002a02:	464b      	mov	r3, r9
 8002a04:	1891      	adds	r1, r2, r2
 8002a06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a08:	415b      	adcs	r3, r3
 8002a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a10:	4641      	mov	r1, r8
 8002a12:	eb12 0a01 	adds.w	sl, r2, r1
 8002a16:	4649      	mov	r1, r9
 8002a18:	eb43 0b01 	adc.w	fp, r3, r1
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a30:	4692      	mov	sl, r2
 8002a32:	469b      	mov	fp, r3
 8002a34:	4643      	mov	r3, r8
 8002a36:	eb1a 0303 	adds.w	r3, sl, r3
 8002a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a3e:	464b      	mov	r3, r9
 8002a40:	eb4b 0303 	adc.w	r3, fp, r3
 8002a44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	18db      	adds	r3, r3, r3
 8002a60:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a62:	4613      	mov	r3, r2
 8002a64:	eb42 0303 	adc.w	r3, r2, r3
 8002a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a72:	f7fd fbc7 	bl	8000204 <__aeabi_uldivmod>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b6c <UART_SetConfig+0x2d4>)
 8002a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2264      	movs	r2, #100	@ 0x64
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	1acb      	subs	r3, r1, r3
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a92:	4b36      	ldr	r3, [pc, #216]	@ (8002b6c <UART_SetConfig+0x2d4>)
 8002a94:	fba3 2302 	umull	r2, r3, r3, r2
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002aa0:	441c      	add	r4, r3
 8002aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002aac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ab0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ab4:	4642      	mov	r2, r8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	1891      	adds	r1, r2, r2
 8002aba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002abc:	415b      	adcs	r3, r3
 8002abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ac0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	1851      	adds	r1, r2, r1
 8002ac8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002aca:	4649      	mov	r1, r9
 8002acc:	414b      	adcs	r3, r1
 8002ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002adc:	4659      	mov	r1, fp
 8002ade:	00cb      	lsls	r3, r1, #3
 8002ae0:	4651      	mov	r1, sl
 8002ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ae6:	4651      	mov	r1, sl
 8002ae8:	00ca      	lsls	r2, r1, #3
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	4642      	mov	r2, r8
 8002af2:	189b      	adds	r3, r3, r2
 8002af4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002af8:	464b      	mov	r3, r9
 8002afa:	460a      	mov	r2, r1
 8002afc:	eb42 0303 	adc.w	r3, r2, r3
 8002b00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b18:	460b      	mov	r3, r1
 8002b1a:	18db      	adds	r3, r3, r3
 8002b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b1e:	4613      	mov	r3, r2
 8002b20:	eb42 0303 	adc.w	r3, r2, r3
 8002b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b2e:	f7fd fb69 	bl	8000204 <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <UART_SetConfig+0x2d4>)
 8002b38:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	2164      	movs	r1, #100	@ 0x64
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	3332      	adds	r3, #50	@ 0x32
 8002b4a:	4a08      	ldr	r2, [pc, #32]	@ (8002b6c <UART_SetConfig+0x2d4>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	f003 0207 	and.w	r2, r3, #7
 8002b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4422      	add	r2, r4
 8002b5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b60:	e106      	b.n	8002d70 <UART_SetConfig+0x4d8>
 8002b62:	bf00      	nop
 8002b64:	40011000 	.word	0x40011000
 8002b68:	40011400 	.word	0x40011400
 8002b6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b82:	4642      	mov	r2, r8
 8002b84:	464b      	mov	r3, r9
 8002b86:	1891      	adds	r1, r2, r2
 8002b88:	6239      	str	r1, [r7, #32]
 8002b8a:	415b      	adcs	r3, r3
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b92:	4641      	mov	r1, r8
 8002b94:	1854      	adds	r4, r2, r1
 8002b96:	4649      	mov	r1, r9
 8002b98:	eb43 0501 	adc.w	r5, r3, r1
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	00eb      	lsls	r3, r5, #3
 8002ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002baa:	00e2      	lsls	r2, r4, #3
 8002bac:	4614      	mov	r4, r2
 8002bae:	461d      	mov	r5, r3
 8002bb0:	4643      	mov	r3, r8
 8002bb2:	18e3      	adds	r3, r4, r3
 8002bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bb8:	464b      	mov	r3, r9
 8002bba:	eb45 0303 	adc.w	r3, r5, r3
 8002bbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bde:	4629      	mov	r1, r5
 8002be0:	008b      	lsls	r3, r1, #2
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002be8:	4621      	mov	r1, r4
 8002bea:	008a      	lsls	r2, r1, #2
 8002bec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bf0:	f7fd fb08 	bl	8000204 <__aeabi_uldivmod>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4b60      	ldr	r3, [pc, #384]	@ (8002d7c <UART_SetConfig+0x4e4>)
 8002bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	011c      	lsls	r4, r3, #4
 8002c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c14:	4642      	mov	r2, r8
 8002c16:	464b      	mov	r3, r9
 8002c18:	1891      	adds	r1, r2, r2
 8002c1a:	61b9      	str	r1, [r7, #24]
 8002c1c:	415b      	adcs	r3, r3
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c24:	4641      	mov	r1, r8
 8002c26:	1851      	adds	r1, r2, r1
 8002c28:	6139      	str	r1, [r7, #16]
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	414b      	adcs	r3, r1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	00cb      	lsls	r3, r1, #3
 8002c40:	4651      	mov	r1, sl
 8002c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c46:	4651      	mov	r1, sl
 8002c48:	00ca      	lsls	r2, r1, #3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4642      	mov	r2, r8
 8002c52:	189b      	adds	r3, r3, r2
 8002c54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c58:	464b      	mov	r3, r9
 8002c5a:	460a      	mov	r2, r1
 8002c5c:	eb42 0303 	adc.w	r3, r2, r3
 8002c60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	008b      	lsls	r3, r1, #2
 8002c80:	4641      	mov	r1, r8
 8002c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c86:	4641      	mov	r1, r8
 8002c88:	008a      	lsls	r2, r1, #2
 8002c8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c8e:	f7fd fab9 	bl	8000204 <__aeabi_uldivmod>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	4b38      	ldr	r3, [pc, #224]	@ (8002d7c <UART_SetConfig+0x4e4>)
 8002c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2264      	movs	r2, #100	@ 0x64
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	1acb      	subs	r3, r1, r3
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	3332      	adds	r3, #50	@ 0x32
 8002cac:	4a33      	ldr	r2, [pc, #204]	@ (8002d7c <UART_SetConfig+0x4e4>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cb8:	441c      	add	r4, r3
 8002cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002cc8:	4642      	mov	r2, r8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	1891      	adds	r1, r2, r2
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	415b      	adcs	r3, r3
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd8:	4641      	mov	r1, r8
 8002cda:	1851      	adds	r1, r2, r1
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	4649      	mov	r1, r9
 8002ce0:	414b      	adcs	r3, r1
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cf0:	4659      	mov	r1, fp
 8002cf2:	00cb      	lsls	r3, r1, #3
 8002cf4:	4651      	mov	r1, sl
 8002cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	00ca      	lsls	r2, r1, #3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	4642      	mov	r2, r8
 8002d06:	189b      	adds	r3, r3, r2
 8002d08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d0a:	464b      	mov	r3, r9
 8002d0c:	460a      	mov	r2, r1
 8002d0e:	eb42 0303 	adc.w	r3, r2, r3
 8002d12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	008b      	lsls	r3, r1, #2
 8002d30:	4641      	mov	r1, r8
 8002d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d36:	4641      	mov	r1, r8
 8002d38:	008a      	lsls	r2, r1, #2
 8002d3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d3e:	f7fd fa61 	bl	8000204 <__aeabi_uldivmod>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4b0d      	ldr	r3, [pc, #52]	@ (8002d7c <UART_SetConfig+0x4e4>)
 8002d48:	fba3 1302 	umull	r1, r3, r3, r2
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	2164      	movs	r1, #100	@ 0x64
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	3332      	adds	r3, #50	@ 0x32
 8002d5a:	4a08      	ldr	r2, [pc, #32]	@ (8002d7c <UART_SetConfig+0x4e4>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	f003 020f 	and.w	r2, r3, #15
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4422      	add	r2, r4
 8002d6e:	609a      	str	r2, [r3, #8]
}
 8002d70:	bf00      	nop
 8002d72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d76:	46bd      	mov	sp, r7
 8002d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d7c:	51eb851f 	.word	0x51eb851f

08002d80 <memset>:
 8002d80:	4402      	add	r2, r0
 8002d82:	4603      	mov	r3, r0
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d100      	bne.n	8002d8a <memset+0xa>
 8002d88:	4770      	bx	lr
 8002d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d8e:	e7f9      	b.n	8002d84 <memset+0x4>

08002d90 <__libc_init_array>:
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	4d0d      	ldr	r5, [pc, #52]	@ (8002dc8 <__libc_init_array+0x38>)
 8002d94:	4c0d      	ldr	r4, [pc, #52]	@ (8002dcc <__libc_init_array+0x3c>)
 8002d96:	1b64      	subs	r4, r4, r5
 8002d98:	10a4      	asrs	r4, r4, #2
 8002d9a:	2600      	movs	r6, #0
 8002d9c:	42a6      	cmp	r6, r4
 8002d9e:	d109      	bne.n	8002db4 <__libc_init_array+0x24>
 8002da0:	4d0b      	ldr	r5, [pc, #44]	@ (8002dd0 <__libc_init_array+0x40>)
 8002da2:	4c0c      	ldr	r4, [pc, #48]	@ (8002dd4 <__libc_init_array+0x44>)
 8002da4:	f000 f818 	bl	8002dd8 <_init>
 8002da8:	1b64      	subs	r4, r4, r5
 8002daa:	10a4      	asrs	r4, r4, #2
 8002dac:	2600      	movs	r6, #0
 8002dae:	42a6      	cmp	r6, r4
 8002db0:	d105      	bne.n	8002dbe <__libc_init_array+0x2e>
 8002db2:	bd70      	pop	{r4, r5, r6, pc}
 8002db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db8:	4798      	blx	r3
 8002dba:	3601      	adds	r6, #1
 8002dbc:	e7ee      	b.n	8002d9c <__libc_init_array+0xc>
 8002dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc2:	4798      	blx	r3
 8002dc4:	3601      	adds	r6, #1
 8002dc6:	e7f2      	b.n	8002dae <__libc_init_array+0x1e>
 8002dc8:	08002e10 	.word	0x08002e10
 8002dcc:	08002e10 	.word	0x08002e10
 8002dd0:	08002e10 	.word	0x08002e10
 8002dd4:	08002e14 	.word	0x08002e14

08002dd8 <_init>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	bf00      	nop
 8002ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dde:	bc08      	pop	{r3}
 8002de0:	469e      	mov	lr, r3
 8002de2:	4770      	bx	lr

08002de4 <_fini>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	bf00      	nop
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr
