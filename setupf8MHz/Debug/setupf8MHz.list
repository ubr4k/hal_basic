
setupf8MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001184  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001348  08001348  00002348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001350  08001350  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001350  08001350  00002350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001358  08001358  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001358  08001358  00002358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800135c  0800135c  0000235c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001360  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800136c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800136c  00003074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000702e  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011c5  00000000  00000000  0000a06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  0000b230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000475  00000000  00000000  0000b808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff92  00000000  00000000  0000bc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000076ae  00000000  00000000  0002bc0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c43af  00000000  00000000  000332bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f766c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016f0  00000000  00000000  000f76b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000f8da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001330 	.word	0x08001330

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001330 	.word	0x08001330

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SysTick_Handler>:

#include "stm32f4xx_hal.h"
#include "mainb.h"

void SysTick_Handler (void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004f8:	f000 f938 	bl	800076c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004fc:	f000 fa5b 	bl	80009b6 <HAL_SYSTICK_IRQHandler>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <main>:
void UART2_Init(void);

UART_HandleTypeDef huart2;

int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_Init();
 8000508:	f000 f8de 	bl	80006c8 <HAL_Init>
	SystemClockConfig();
 800050c:	f000 f804 	bl	8000518 <SystemClockConfig>
	UART2_Init();
 8000510:	f000 f80e 	bl	8000530 <UART2_Init>

	while(1);
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <main+0x10>

08000518 <SystemClockConfig>:

	return 0;
}

void SystemClockConfig(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <Error_handler>:

void Error_handler (void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
	while(1);
 800052a:	bf00      	nop
 800052c:	e7fd      	b.n	800052a <Error_handler+0x4>
	...

08000530 <UART2_Init>:
}

void UART2_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <UART2_Init+0x44>)
 8000536:	4a10      	ldr	r2, [pc, #64]	@ (8000578 <UART2_Init+0x48>)
 8000538:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800053a:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <UART2_Init+0x44>)
 800053c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000540:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <UART2_Init+0x44>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <UART2_Init+0x44>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <UART2_Init+0x44>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <UART2_Init+0x44>)
 8000556:	2200      	movs	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800055a:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <UART2_Init+0x44>)
 800055c:	220c      	movs	r2, #12
 800055e:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	@ (8000574 <UART2_Init+0x44>)
 8000562:	f000 fbfd 	bl	8000d60 <HAL_UART_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <UART2_Init+0x40>
	{
		Error_handler();
 800056c:	f7ff ffdb 	bl	8000526 <Error_handler>
	}
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000028 	.word	0x20000028
 8000578:	40004400 	.word	0x40004400

0800057c <HAL_MspInit>:

#include "stm32f4xx_hal.h"
#include "mainb.h"

void HAL_MspInit(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000580:	2003      	movs	r0, #3
 8000582:	f000 f9d7 	bl	8000934 <HAL_NVIC_SetPriorityGrouping>

	SCB->SHCSR |= 0x7 <<16;
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <HAL_MspInit+0x40>)
 8000588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800058a:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <HAL_MspInit+0x40>)
 800058c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000590:	6253      	str	r3, [r2, #36]	@ 0x24

	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	f06f 000a 	mvn.w	r0, #10
 800059a:	f000 f9d6 	bl	800094a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	f06f 000b 	mvn.w	r0, #11
 80005a6:	f000 f9d0 	bl	800094a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	f06f 0009 	mvn.w	r0, #9
 80005b2:	f000 f9ca 	bl	800094a <HAL_NVIC_SetPriority>


}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  __HAL_RCC_USART2_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <HAL_UART_MspInit+0x88>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000648 <HAL_UART_MspInit+0x88>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <HAL_UART_MspInit+0x88>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <HAL_UART_MspInit+0x88>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ec:	4a16      	ldr	r2, [pc, #88]	@ (8000648 <HAL_UART_MspInit+0x88>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <HAL_UART_MspInit+0x88>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitTypeDef gpio_uart;
  gpio_uart.Pin = GPIO_PIN_2;
 8000600:	2304      	movs	r3, #4
 8000602:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	61bb      	str	r3, [r7, #24]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
  gpio_uart.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  gpio_uart.Alternate = GPIO_AF7_USART2;
 8000610:	2307      	movs	r3, #7
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	480c      	ldr	r0, [pc, #48]	@ (800064c <HAL_UART_MspInit+0x8c>)
 800061c:	f000 f9d8 	bl	80009d0 <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3;
 8000620:	2308      	movs	r3, #8
 8000622:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	4808      	ldr	r0, [pc, #32]	@ (800064c <HAL_UART_MspInit+0x8c>)
 800062c:	f000 f9d0 	bl	80009d0 <HAL_GPIO_Init>


  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000630:	2026      	movs	r0, #38	@ 0x26
 8000632:	f000 f9a6 	bl	8000982 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	210f      	movs	r1, #15
 800063a:	2026      	movs	r0, #38	@ 0x26
 800063c:	f000 f985 	bl	800094a <HAL_NVIC_SetPriority>
}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	@ 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40020000 	.word	0x40020000

08000650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <SystemInit+0x20>)
 8000656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800065a:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <SystemInit+0x20>)
 800065c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000660:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000674:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000678:	f7ff ffea 	bl	8000650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800067e:	490d      	ldr	r1, [pc, #52]	@ (80006b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000680:	4a0d      	ldr	r2, [pc, #52]	@ (80006b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000684:	e002      	b.n	800068c <LoopCopyDataInit>

08000686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068a:	3304      	adds	r3, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800068c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000690:	d3f9      	bcc.n	8000686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000692:	4a0a      	ldr	r2, [pc, #40]	@ (80006bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000694:	4c0a      	ldr	r4, [pc, #40]	@ (80006c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000698:	e001      	b.n	800069e <LoopFillZerobss>

0800069a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069c:	3204      	adds	r2, #4

0800069e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a0:	d3fb      	bcc.n	800069a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80006a2:	f000 fe21 	bl	80012e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006a6:	f7ff ff2d 	bl	8000504 <main>
  bx  lr    
 80006aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b8:	08001360 	.word	0x08001360
  ldr r2, =_sbss
 80006bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c0:	20000074 	.word	0x20000074

080006c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC_IRQHandler>
	...

080006c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <HAL_Init+0x40>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000708 <HAL_Init+0x40>)
 80006d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <HAL_Init+0x40>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000708 <HAL_Init+0x40>)
 80006de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <HAL_Init+0x40>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a07      	ldr	r2, [pc, #28]	@ (8000708 <HAL_Init+0x40>)
 80006ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 f91f 	bl	8000934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 f808 	bl	800070c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fc:	f7ff ff3e 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023c00 	.word	0x40023c00

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <HAL_InitTick+0x54>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <HAL_InitTick+0x58>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000722:	fbb3 f3f1 	udiv	r3, r3, r1
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f937 	bl	800099e <HAL_SYSTICK_Config>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e00e      	b.n	8000758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d80a      	bhi.n	8000756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f000 f8ff 	bl	800094a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4a06      	ldr	r2, [pc, #24]	@ (8000768 <HAL_InitTick+0x5c>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000000 	.word	0x20000000
 8000764:	20000008 	.word	0x20000008
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_IncTick+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_IncTick+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a04      	ldr	r2, [pc, #16]	@ (8000790 <HAL_IncTick+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	20000070 	.word	0x20000070

08000794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c6:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	60d3      	str	r3, [r2, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <__NVIC_GetPriorityGrouping+0x18>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	f003 0307 	and.w	r3, r3, #7
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	2b00      	cmp	r3, #0
 8000808:	db0b      	blt.n	8000822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f003 021f 	and.w	r2, r3, #31
 8000810:	4907      	ldr	r1, [pc, #28]	@ (8000830 <__NVIC_EnableIRQ+0x38>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	095b      	lsrs	r3, r3, #5
 8000818:	2001      	movs	r0, #1
 800081a:	fa00 f202 	lsl.w	r2, r0, r2
 800081e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000e100 	.word	0xe000e100

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	db0a      	blt.n	800085e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	490c      	ldr	r1, [pc, #48]	@ (8000880 <__NVIC_SetPriority+0x4c>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	0112      	lsls	r2, r2, #4
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	440b      	add	r3, r1
 8000858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800085c:	e00a      	b.n	8000874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4908      	ldr	r1, [pc, #32]	@ (8000884 <__NVIC_SetPriority+0x50>)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	3b04      	subs	r3, #4
 800086c:	0112      	lsls	r2, r2, #4
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	440b      	add	r3, r1
 8000872:	761a      	strb	r2, [r3, #24]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000888:	b480      	push	{r7}
 800088a:	b089      	sub	sp, #36	@ 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	f1c3 0307 	rsb	r3, r3, #7
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	bf28      	it	cs
 80008a6:	2304      	movcs	r3, #4
 80008a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3304      	adds	r3, #4
 80008ae:	2b06      	cmp	r3, #6
 80008b0:	d902      	bls.n	80008b8 <NVIC_EncodePriority+0x30>
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3b03      	subs	r3, #3
 80008b6:	e000      	b.n	80008ba <NVIC_EncodePriority+0x32>
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43da      	mvns	r2, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	401a      	ands	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d0:	f04f 31ff 	mov.w	r1, #4294967295
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43d9      	mvns	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	4313      	orrs	r3, r2
         );
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3724      	adds	r7, #36	@ 0x24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000900:	d301      	bcc.n	8000906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000902:	2301      	movs	r3, #1
 8000904:	e00f      	b.n	8000926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000906:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <SysTick_Config+0x40>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090e:	210f      	movs	r1, #15
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f7ff ff8e 	bl	8000834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000918:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <SysTick_Config+0x40>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091e:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <SysTick_Config+0x40>)
 8000920:	2207      	movs	r2, #7
 8000922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	e000e010 	.word	0xe000e010

08000934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff29 	bl	8000794 <__NVIC_SetPriorityGrouping>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800095c:	f7ff ff3e 	bl	80007dc <__NVIC_GetPriorityGrouping>
 8000960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff ff8e 	bl	8000888 <NVIC_EncodePriority>
 800096c:	4602      	mov	r2, r0
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff5d 	bl	8000834 <__NVIC_SetPriority>
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff31 	bl	80007f8 <__NVIC_EnableIRQ>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff ffa2 	bl	80008f0 <SysTick_Config>
 80009ac:	4603      	mov	r3, r0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80009ba:	f000 f802 	bl	80009c2 <HAL_SYSTICK_Callback>
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	@ 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
 80009ea:	e165      	b.n	8000cb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009ec:	2201      	movs	r2, #1
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	f040 8154 	bne.w	8000cb2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d005      	beq.n	8000a22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d130      	bne.n	8000a84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4013      	ands	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	68da      	ldr	r2, [r3, #12]
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a58:	2201      	movs	r2, #1
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	091b      	lsrs	r3, r3, #4
 8000a6e:	f003 0201 	and.w	r2, r3, #1
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d017      	beq.n	8000ac0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d123      	bne.n	8000b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	08da      	lsrs	r2, r3, #3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3208      	adds	r2, #8
 8000ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	f003 0307 	and.w	r3, r3, #7
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	220f      	movs	r2, #15
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	691a      	ldr	r2, [r3, #16]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	08da      	lsrs	r2, r3, #3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3208      	adds	r2, #8
 8000b0e:	69b9      	ldr	r1, [r7, #24]
 8000b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	2203      	movs	r2, #3
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0203 	and.w	r2, r3, #3
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f000 80ae 	beq.w	8000cb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8000cd0 <HAL_GPIO_Init+0x300>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	4a5c      	ldr	r2, [pc, #368]	@ (8000cd0 <HAL_GPIO_Init+0x300>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b66:	4b5a      	ldr	r3, [pc, #360]	@ (8000cd0 <HAL_GPIO_Init+0x300>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b72:	4a58      	ldr	r2, [pc, #352]	@ (8000cd4 <HAL_GPIO_Init+0x304>)
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	220f      	movs	r2, #15
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4013      	ands	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a4f      	ldr	r2, [pc, #316]	@ (8000cd8 <HAL_GPIO_Init+0x308>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d025      	beq.n	8000bea <HAL_GPIO_Init+0x21a>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a4e      	ldr	r2, [pc, #312]	@ (8000cdc <HAL_GPIO_Init+0x30c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d01f      	beq.n	8000be6 <HAL_GPIO_Init+0x216>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a4d      	ldr	r2, [pc, #308]	@ (8000ce0 <HAL_GPIO_Init+0x310>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d019      	beq.n	8000be2 <HAL_GPIO_Init+0x212>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ce4 <HAL_GPIO_Init+0x314>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0x20e>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8000ce8 <HAL_GPIO_Init+0x318>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d00d      	beq.n	8000bda <HAL_GPIO_Init+0x20a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8000cec <HAL_GPIO_Init+0x31c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d007      	beq.n	8000bd6 <HAL_GPIO_Init+0x206>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a49      	ldr	r2, [pc, #292]	@ (8000cf0 <HAL_GPIO_Init+0x320>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_GPIO_Init+0x202>
 8000bce:	2306      	movs	r3, #6
 8000bd0:	e00c      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	e00a      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	e008      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000bda:	2304      	movs	r3, #4
 8000bdc:	e006      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000bde:	2303      	movs	r3, #3
 8000be0:	e004      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000be2:	2302      	movs	r3, #2
 8000be4:	e002      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <HAL_GPIO_Init+0x21c>
 8000bea:	2300      	movs	r3, #0
 8000bec:	69fa      	ldr	r2, [r7, #28]
 8000bee:	f002 0203 	and.w	r2, r2, #3
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	4093      	lsls	r3, r2
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bfc:	4935      	ldr	r1, [pc, #212]	@ (8000cd4 <HAL_GPIO_Init+0x304>)
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c2e:	4a31      	ldr	r2, [pc, #196]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c34:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c58:	4a26      	ldr	r2, [pc, #152]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c5e:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c82:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cac:	4a11      	ldr	r2, [pc, #68]	@ (8000cf4 <HAL_GPIO_Init+0x324>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	61fb      	str	r3, [r7, #28]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	2b0f      	cmp	r3, #15
 8000cbc:	f67f ae96 	bls.w	80009ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3724      	adds	r7, #36	@ 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40013800 	.word	0x40013800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020c00 	.word	0x40020c00
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40021400 	.word	0x40021400
 8000cf0:	40021800 	.word	0x40021800
 8000cf4:	40013c00 	.word	0x40013c00

08000cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000000 	.word	0x20000000

08000d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000d14:	f7ff fff0 	bl	8000cf8 <HAL_RCC_GetHCLKFreq>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	0a9b      	lsrs	r3, r3, #10
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	4903      	ldr	r1, [pc, #12]	@ (8000d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d26:	5ccb      	ldrb	r3, [r1, r3]
 8000d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	08001348 	.word	0x08001348

08000d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000d3c:	f7ff ffdc 	bl	8000cf8 <HAL_RCC_GetHCLKFreq>
 8000d40:	4602      	mov	r2, r0
 8000d42:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	0b5b      	lsrs	r3, r3, #13
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	4903      	ldr	r1, [pc, #12]	@ (8000d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d4e:	5ccb      	ldrb	r3, [r1, r3]
 8000d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	08001348 	.word	0x08001348

08000d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e042      	b.n	8000df8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d106      	bne.n	8000d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fc1a 	bl	80005c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2224      	movs	r2, #36	@ 0x24
 8000d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f82b 	bl	8000e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	691a      	ldr	r2, [r3, #16]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	695a      	ldr	r2, [r3, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2220      	movs	r2, #32
 8000de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2220      	movs	r2, #32
 8000dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e04:	b0c0      	sub	sp, #256	@ 0x100
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8000e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e1c:	68d9      	ldr	r1, [r3, #12]
 8000e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	ea40 0301 	orr.w	r3, r0, r1
 8000e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	431a      	orrs	r2, r3
 8000e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8000e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8000e58:	f021 010c 	bic.w	r1, r1, #12
 8000e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000e66:	430b      	orrs	r3, r1
 8000e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8000e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e7a:	6999      	ldr	r1, [r3, #24]
 8000e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	ea40 0301 	orr.w	r3, r0, r1
 8000e86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80010cc <UART_SetConfig+0x2cc>)
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d005      	beq.n	8000ea0 <UART_SetConfig+0xa0>
 8000e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4b8d      	ldr	r3, [pc, #564]	@ (80010d0 <UART_SetConfig+0x2d0>)
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d104      	bne.n	8000eaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000ea0:	f7ff ff4a 	bl	8000d38 <HAL_RCC_GetPCLK2Freq>
 8000ea4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8000ea8:	e003      	b.n	8000eb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000eaa:	f7ff ff31 	bl	8000d10 <HAL_RCC_GetPCLK1Freq>
 8000eae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000ebc:	f040 810c 	bne.w	80010d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000eca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8000ece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8000ed2:	4622      	mov	r2, r4
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	1891      	adds	r1, r2, r2
 8000ed8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8000eda:	415b      	adcs	r3, r3
 8000edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000ee2:	4621      	mov	r1, r4
 8000ee4:	eb12 0801 	adds.w	r8, r2, r1
 8000ee8:	4629      	mov	r1, r5
 8000eea:	eb43 0901 	adc.w	r9, r3, r1
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f02:	4690      	mov	r8, r2
 8000f04:	4699      	mov	r9, r3
 8000f06:	4623      	mov	r3, r4
 8000f08:	eb18 0303 	adds.w	r3, r8, r3
 8000f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000f10:	462b      	mov	r3, r5
 8000f12:	eb49 0303 	adc.w	r3, r9, r3
 8000f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000f26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8000f2e:	460b      	mov	r3, r1
 8000f30:	18db      	adds	r3, r3, r3
 8000f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8000f34:	4613      	mov	r3, r2
 8000f36:	eb42 0303 	adc.w	r3, r2, r3
 8000f3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8000f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8000f44:	f7ff f95e 	bl	8000204 <__aeabi_uldivmod>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4b61      	ldr	r3, [pc, #388]	@ (80010d4 <UART_SetConfig+0x2d4>)
 8000f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	011c      	lsls	r4, r3, #4
 8000f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8000f60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000f64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8000f68:	4642      	mov	r2, r8
 8000f6a:	464b      	mov	r3, r9
 8000f6c:	1891      	adds	r1, r2, r2
 8000f6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8000f70:	415b      	adcs	r3, r3
 8000f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000f78:	4641      	mov	r1, r8
 8000f7a:	eb12 0a01 	adds.w	sl, r2, r1
 8000f7e:	4649      	mov	r1, r9
 8000f80:	eb43 0b01 	adc.w	fp, r3, r1
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000f90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000f98:	4692      	mov	sl, r2
 8000f9a:	469b      	mov	fp, r3
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	eb1a 0303 	adds.w	r3, sl, r3
 8000fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000fa6:	464b      	mov	r3, r9
 8000fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8000fac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000fbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	18db      	adds	r3, r3, r3
 8000fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8000fca:	4613      	mov	r3, r2
 8000fcc:	eb42 0303 	adc.w	r3, r2, r3
 8000fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8000fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000fd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8000fda:	f7ff f913 	bl	8000204 <__aeabi_uldivmod>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80010d4 <UART_SetConfig+0x2d4>)
 8000fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2264      	movs	r2, #100	@ 0x64
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	1acb      	subs	r3, r1, r3
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8000ffa:	4b36      	ldr	r3, [pc, #216]	@ (80010d4 <UART_SetConfig+0x2d4>)
 8000ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8001000:	095b      	lsrs	r3, r3, #5
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001008:	441c      	add	r4, r3
 800100a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800100e:	2200      	movs	r2, #0
 8001010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001014:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800101c:	4642      	mov	r2, r8
 800101e:	464b      	mov	r3, r9
 8001020:	1891      	adds	r1, r2, r2
 8001022:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001024:	415b      	adcs	r3, r3
 8001026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800102c:	4641      	mov	r1, r8
 800102e:	1851      	adds	r1, r2, r1
 8001030:	6339      	str	r1, [r7, #48]	@ 0x30
 8001032:	4649      	mov	r1, r9
 8001034:	414b      	adcs	r3, r1
 8001036:	637b      	str	r3, [r7, #52]	@ 0x34
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001044:	4659      	mov	r1, fp
 8001046:	00cb      	lsls	r3, r1, #3
 8001048:	4651      	mov	r1, sl
 800104a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800104e:	4651      	mov	r1, sl
 8001050:	00ca      	lsls	r2, r1, #3
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	4603      	mov	r3, r0
 8001058:	4642      	mov	r2, r8
 800105a:	189b      	adds	r3, r3, r2
 800105c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001060:	464b      	mov	r3, r9
 8001062:	460a      	mov	r2, r1
 8001064:	eb42 0303 	adc.w	r3, r2, r3
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800106c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001078:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800107c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001080:	460b      	mov	r3, r1
 8001082:	18db      	adds	r3, r3, r3
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001086:	4613      	mov	r3, r2
 8001088:	eb42 0303 	adc.w	r3, r2, r3
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800108e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001096:	f7ff f8b5 	bl	8000204 <__aeabi_uldivmod>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <UART_SetConfig+0x2d4>)
 80010a0:	fba3 1302 	umull	r1, r3, r3, r2
 80010a4:	095b      	lsrs	r3, r3, #5
 80010a6:	2164      	movs	r1, #100	@ 0x64
 80010a8:	fb01 f303 	mul.w	r3, r1, r3
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	3332      	adds	r3, #50	@ 0x32
 80010b2:	4a08      	ldr	r2, [pc, #32]	@ (80010d4 <UART_SetConfig+0x2d4>)
 80010b4:	fba2 2303 	umull	r2, r3, r2, r3
 80010b8:	095b      	lsrs	r3, r3, #5
 80010ba:	f003 0207 	and.w	r2, r3, #7
 80010be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4422      	add	r2, r4
 80010c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80010c8:	e106      	b.n	80012d8 <UART_SetConfig+0x4d8>
 80010ca:	bf00      	nop
 80010cc:	40011000 	.word	0x40011000
 80010d0:	40011400 	.word	0x40011400
 80010d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80010d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80010dc:	2200      	movs	r2, #0
 80010de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80010e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80010e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80010ea:	4642      	mov	r2, r8
 80010ec:	464b      	mov	r3, r9
 80010ee:	1891      	adds	r1, r2, r2
 80010f0:	6239      	str	r1, [r7, #32]
 80010f2:	415b      	adcs	r3, r3
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010fa:	4641      	mov	r1, r8
 80010fc:	1854      	adds	r4, r2, r1
 80010fe:	4649      	mov	r1, r9
 8001100:	eb43 0501 	adc.w	r5, r3, r1
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	00eb      	lsls	r3, r5, #3
 800110e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001112:	00e2      	lsls	r2, r4, #3
 8001114:	4614      	mov	r4, r2
 8001116:	461d      	mov	r5, r3
 8001118:	4643      	mov	r3, r8
 800111a:	18e3      	adds	r3, r4, r3
 800111c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001120:	464b      	mov	r3, r9
 8001122:	eb45 0303 	adc.w	r3, r5, r3
 8001126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800112a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001136:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001146:	4629      	mov	r1, r5
 8001148:	008b      	lsls	r3, r1, #2
 800114a:	4621      	mov	r1, r4
 800114c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001150:	4621      	mov	r1, r4
 8001152:	008a      	lsls	r2, r1, #2
 8001154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001158:	f7ff f854 	bl	8000204 <__aeabi_uldivmod>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4b60      	ldr	r3, [pc, #384]	@ (80012e4 <UART_SetConfig+0x4e4>)
 8001162:	fba3 2302 	umull	r2, r3, r3, r2
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	011c      	lsls	r4, r3, #4
 800116a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800116e:	2200      	movs	r2, #0
 8001170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001174:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800117c:	4642      	mov	r2, r8
 800117e:	464b      	mov	r3, r9
 8001180:	1891      	adds	r1, r2, r2
 8001182:	61b9      	str	r1, [r7, #24]
 8001184:	415b      	adcs	r3, r3
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800118c:	4641      	mov	r1, r8
 800118e:	1851      	adds	r1, r2, r1
 8001190:	6139      	str	r1, [r7, #16]
 8001192:	4649      	mov	r1, r9
 8001194:	414b      	adcs	r3, r1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80011a4:	4659      	mov	r1, fp
 80011a6:	00cb      	lsls	r3, r1, #3
 80011a8:	4651      	mov	r1, sl
 80011aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80011ae:	4651      	mov	r1, sl
 80011b0:	00ca      	lsls	r2, r1, #3
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	4603      	mov	r3, r0
 80011b8:	4642      	mov	r2, r8
 80011ba:	189b      	adds	r3, r3, r2
 80011bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80011c0:	464b      	mov	r3, r9
 80011c2:	460a      	mov	r2, r1
 80011c4:	eb42 0303 	adc.w	r3, r2, r3
 80011c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80011cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80011d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80011e4:	4649      	mov	r1, r9
 80011e6:	008b      	lsls	r3, r1, #2
 80011e8:	4641      	mov	r1, r8
 80011ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011ee:	4641      	mov	r1, r8
 80011f0:	008a      	lsls	r2, r1, #2
 80011f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80011f6:	f7ff f805 	bl	8000204 <__aeabi_uldivmod>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4611      	mov	r1, r2
 8001200:	4b38      	ldr	r3, [pc, #224]	@ (80012e4 <UART_SetConfig+0x4e4>)
 8001202:	fba3 2301 	umull	r2, r3, r3, r1
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2264      	movs	r2, #100	@ 0x64
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	1acb      	subs	r3, r1, r3
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	3332      	adds	r3, #50	@ 0x32
 8001214:	4a33      	ldr	r2, [pc, #204]	@ (80012e4 <UART_SetConfig+0x4e4>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001220:	441c      	add	r4, r3
 8001222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001226:	2200      	movs	r2, #0
 8001228:	673b      	str	r3, [r7, #112]	@ 0x70
 800122a:	677a      	str	r2, [r7, #116]	@ 0x74
 800122c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001230:	4642      	mov	r2, r8
 8001232:	464b      	mov	r3, r9
 8001234:	1891      	adds	r1, r2, r2
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	415b      	adcs	r3, r3
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001240:	4641      	mov	r1, r8
 8001242:	1851      	adds	r1, r2, r1
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	4649      	mov	r1, r9
 8001248:	414b      	adcs	r3, r1
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001258:	4659      	mov	r1, fp
 800125a:	00cb      	lsls	r3, r1, #3
 800125c:	4651      	mov	r1, sl
 800125e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001262:	4651      	mov	r1, sl
 8001264:	00ca      	lsls	r2, r1, #3
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	4603      	mov	r3, r0
 800126c:	4642      	mov	r2, r8
 800126e:	189b      	adds	r3, r3, r2
 8001270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001272:	464b      	mov	r3, r9
 8001274:	460a      	mov	r2, r1
 8001276:	eb42 0303 	adc.w	r3, r2, r3
 800127a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800127c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	663b      	str	r3, [r7, #96]	@ 0x60
 8001286:	667a      	str	r2, [r7, #100]	@ 0x64
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001294:	4649      	mov	r1, r9
 8001296:	008b      	lsls	r3, r1, #2
 8001298:	4641      	mov	r1, r8
 800129a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800129e:	4641      	mov	r1, r8
 80012a0:	008a      	lsls	r2, r1, #2
 80012a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80012a6:	f7fe ffad 	bl	8000204 <__aeabi_uldivmod>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <UART_SetConfig+0x4e4>)
 80012b0:	fba3 1302 	umull	r1, r3, r3, r2
 80012b4:	095b      	lsrs	r3, r3, #5
 80012b6:	2164      	movs	r1, #100	@ 0x64
 80012b8:	fb01 f303 	mul.w	r3, r1, r3
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	3332      	adds	r3, #50	@ 0x32
 80012c2:	4a08      	ldr	r2, [pc, #32]	@ (80012e4 <UART_SetConfig+0x4e4>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	095b      	lsrs	r3, r3, #5
 80012ca:	f003 020f 	and.w	r2, r3, #15
 80012ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4422      	add	r2, r4
 80012d6:	609a      	str	r2, [r3, #8]
}
 80012d8:	bf00      	nop
 80012da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80012de:	46bd      	mov	sp, r7
 80012e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012e4:	51eb851f 	.word	0x51eb851f

080012e8 <__libc_init_array>:
 80012e8:	b570      	push	{r4, r5, r6, lr}
 80012ea:	4d0d      	ldr	r5, [pc, #52]	@ (8001320 <__libc_init_array+0x38>)
 80012ec:	4c0d      	ldr	r4, [pc, #52]	@ (8001324 <__libc_init_array+0x3c>)
 80012ee:	1b64      	subs	r4, r4, r5
 80012f0:	10a4      	asrs	r4, r4, #2
 80012f2:	2600      	movs	r6, #0
 80012f4:	42a6      	cmp	r6, r4
 80012f6:	d109      	bne.n	800130c <__libc_init_array+0x24>
 80012f8:	4d0b      	ldr	r5, [pc, #44]	@ (8001328 <__libc_init_array+0x40>)
 80012fa:	4c0c      	ldr	r4, [pc, #48]	@ (800132c <__libc_init_array+0x44>)
 80012fc:	f000 f818 	bl	8001330 <_init>
 8001300:	1b64      	subs	r4, r4, r5
 8001302:	10a4      	asrs	r4, r4, #2
 8001304:	2600      	movs	r6, #0
 8001306:	42a6      	cmp	r6, r4
 8001308:	d105      	bne.n	8001316 <__libc_init_array+0x2e>
 800130a:	bd70      	pop	{r4, r5, r6, pc}
 800130c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001310:	4798      	blx	r3
 8001312:	3601      	adds	r6, #1
 8001314:	e7ee      	b.n	80012f4 <__libc_init_array+0xc>
 8001316:	f855 3b04 	ldr.w	r3, [r5], #4
 800131a:	4798      	blx	r3
 800131c:	3601      	adds	r6, #1
 800131e:	e7f2      	b.n	8001306 <__libc_init_array+0x1e>
 8001320:	08001358 	.word	0x08001358
 8001324:	08001358 	.word	0x08001358
 8001328:	08001358 	.word	0x08001358
 800132c:	0800135c 	.word	0x0800135c

08001330 <_init>:
 8001330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001332:	bf00      	nop
 8001334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001336:	bc08      	pop	{r3}
 8001338:	469e      	mov	lr, r3
 800133a:	4770      	bx	lr

0800133c <_fini>:
 800133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800133e:	bf00      	nop
 8001340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001342:	bc08      	pop	{r3}
 8001344:	469e      	mov	lr, r3
 8001346:	4770      	bx	lr
