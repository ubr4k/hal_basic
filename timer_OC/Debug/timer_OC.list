
timer_OC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c78  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002e3c  08002e3c  00003e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e54  08002e54  0000401c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e54  08002e54  00003e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e5c  08002e5c  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e5c  08002e5c  00003e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e60  08002e60  00003e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08002e64  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000001c  08002e80  0000401c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002e80  000040d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdbb  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ade  00000000  00000000  00010e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  000128e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000934  00000000  00000000  00013498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ef7  00000000  00000000  00013dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e06c  00000000  00000000  00034cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccec0  00000000  00000000  00042d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fbef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003180  00000000  00000000  0010fc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  00112db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e24 	.word	0x08002e24

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08002e24 	.word	0x08002e24

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SysTick_Handler>:
#include "mainb.h"

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler (void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004f8:	f000 fb20 	bl	8000b3c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004fc:	f000 fc6c 	bl	8000dd8 <HAL_SYSTICK_IRQHandler>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 8000508:	4802      	ldr	r0, [pc, #8]	@ (8000514 <TIM2_IRQHandler+0x10>)
 800050a:	f001 fd55 	bl	8001fb8 <HAL_TIM_IRQHandler>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000080 	.word	0x20000080

08000518 <main>:
uint32_t pulse4_value = 3125; //4khz

volatile uint32_t ccr;

int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_Init();
 800051c:	f000 fabc 	bl	8000a98 <HAL_Init>
	SystemClock_Config_HSE(50);
 8000520:	2032      	movs	r0, #50	@ 0x32
 8000522:	f000 f82f 	bl	8000584 <SystemClock_Config_HSE>
	gpio_init();
 8000526:	f000 f951 	bl	80007cc <gpio_init>
	uart2_init();
 800052a:	f000 f8c5 	bl	80006b8 <uart2_init>
	timer2_init();
 800052e:	f000 f8ed 	bl	800070c <timer2_init>


	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_1)!= HAL_OK)
 8000532:	2100      	movs	r1, #0
 8000534:	4812      	ldr	r0, [pc, #72]	@ (8000580 <main+0x68>)
 8000536:	f001 fc29 	bl	8001d8c <HAL_TIM_OC_Start_IT>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <main+0x2c>
	{
		Error_handler();
 8000540:	f000 f9c8 	bl	80008d4 <Error_handler>
	}

	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_2)!= HAL_OK)
 8000544:	2104      	movs	r1, #4
 8000546:	480e      	ldr	r0, [pc, #56]	@ (8000580 <main+0x68>)
 8000548:	f001 fc20 	bl	8001d8c <HAL_TIM_OC_Start_IT>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <main+0x3e>
		{
			Error_handler();
 8000552:	f000 f9bf 	bl	80008d4 <Error_handler>
		}

	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_3)!= HAL_OK)
 8000556:	2108      	movs	r1, #8
 8000558:	4809      	ldr	r0, [pc, #36]	@ (8000580 <main+0x68>)
 800055a:	f001 fc17 	bl	8001d8c <HAL_TIM_OC_Start_IT>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <main+0x50>
		{
			Error_handler();
 8000564:	f000 f9b6 	bl	80008d4 <Error_handler>
		}

	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_4)!= HAL_OK)
 8000568:	210c      	movs	r1, #12
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <main+0x68>)
 800056c:	f001 fc0e 	bl	8001d8c <HAL_TIM_OC_Start_IT>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d002      	beq.n	800057c <main+0x64>
		{
			Error_handler();
 8000576:	f000 f9ad 	bl	80008d4 <Error_handler>
		}
	while(1);
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <main+0x64>
 8000580:	20000080 	.word	0x20000080

08000584 <SystemClock_Config_HSE>:
	return 0;
}

void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	@ 0x58
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]

    RCC_OscInitTypeDef Osc_Init;
    RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 800058e:	2300      	movs	r3, #0
 8000590:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 8000594:	2301      	movs	r3, #1
 8000596:	61fb      	str	r3, [r7, #28]
    Osc_Init.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800059c:	623b      	str	r3, [r7, #32]
    Osc_Init.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	637b      	str	r3, [r7, #52]	@ 0x34
    Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch(clock_freq) {
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b78      	cmp	r3, #120	@ 0x78
 80005ac:	d038      	beq.n	8000620 <SystemClock_Config_HSE+0x9c>
 80005ae:	2b78      	cmp	r3, #120	@ 0x78
 80005b0:	dc7c      	bgt.n	80006ac <SystemClock_Config_HSE+0x128>
 80005b2:	2b32      	cmp	r3, #50	@ 0x32
 80005b4:	d002      	beq.n	80005bc <SystemClock_Config_HSE+0x38>
 80005b6:	2b54      	cmp	r3, #84	@ 0x54
 80005b8:	d019      	beq.n	80005ee <SystemClock_Config_HSE+0x6a>
      flash_latency = 3;
      break;

    default:

      return ;
 80005ba:	e077      	b.n	80006ac <SystemClock_Config_HSE+0x128>
      Osc_Init.PLL.PLLM = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      Osc_Init.PLL.PLLN = 50;
 80005c0:	2332      	movs	r3, #50	@ 0x32
 80005c2:	643b      	str	r3, [r7, #64]	@ 0x40
      Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	647b      	str	r3, [r7, #68]	@ 0x44
      Osc_Init.PLL.PLLQ = 2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      Osc_Init.PLL.PLLR = 2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80005d0:	230f      	movs	r3, #15
 80005d2:	60bb      	str	r3, [r7, #8]
      Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	60fb      	str	r3, [r7, #12]
      Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
      Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e0:	617b      	str	r3, [r7, #20]
      Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
      flash_latency = 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      break;
 80005ec:	e032      	b.n	8000654 <SystemClock_Config_HSE+0xd0>
      Osc_Init.PLL.PLLM = 4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      Osc_Init.PLL.PLLN = 84;
 80005f2:	2354      	movs	r3, #84	@ 0x54
 80005f4:	643b      	str	r3, [r7, #64]	@ 0x40
      Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	647b      	str	r3, [r7, #68]	@ 0x44
      Osc_Init.PLL.PLLQ = 2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      Osc_Init.PLL.PLLR = 2;
 80005fe:	2302      	movs	r3, #2
 8000600:	64fb      	str	r3, [r7, #76]	@ 0x4c
      Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000602:	230f      	movs	r3, #15
 8000604:	60bb      	str	r3, [r7, #8]
      Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	60fb      	str	r3, [r7, #12]
      Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
      Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000612:	617b      	str	r3, [r7, #20]
      Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
      flash_latency = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      break;
 800061e:	e019      	b.n	8000654 <SystemClock_Config_HSE+0xd0>
      Osc_Init.PLL.PLLM = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	63fb      	str	r3, [r7, #60]	@ 0x3c
      Osc_Init.PLL.PLLN = 120;
 8000624:	2378      	movs	r3, #120	@ 0x78
 8000626:	643b      	str	r3, [r7, #64]	@ 0x40
      Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	647b      	str	r3, [r7, #68]	@ 0x44
      Osc_Init.PLL.PLLQ = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	@ 0x48
      Osc_Init.PLL.PLLR = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
      Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000634:	230f      	movs	r3, #15
 8000636:	60bb      	str	r3, [r7, #8]
      Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	60fb      	str	r3, [r7, #12]
      Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
      Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000640:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000644:	617b      	str	r3, [r7, #20]
      Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064a:	61bb      	str	r3, [r7, #24]
      flash_latency = 3;
 800064c:	2303      	movs	r3, #3
 800064e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      break;
 8000652:	bf00      	nop
    }

    if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4618      	mov	r0, r3
 800065a:	f001 f8a9 	bl	80017b0 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config_HSE+0xe4>
    {
      Error_handler();
 8000664:	f000 f936 	bl	80008d4 <Error_handler>
    }

    if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000668:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fd52 	bl	800111c <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config_HSE+0xfe>
    {
      Error_handler();
 800067e:	f000 f929 	bl	80008d4 <Error_handler>
    }

    uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000682:	f000 fe31 	bl	80012e8 <HAL_RCC_GetHCLKFreq>
 8000686:	6538      	str	r0, [r7, #80]	@ 0x50
    HAL_SYSTICK_Config(hclk_freq/1000);
 8000688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800068a:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <SystemClock_Config_HSE+0x130>)
 800068c:	fba2 2303 	umull	r2, r3, r2, r3
 8000690:	099b      	lsrs	r3, r3, #6
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fb77 	bl	8000d86 <HAL_SYSTICK_Config>

    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000698:	2004      	movs	r0, #4
 800069a:	f000 fb81 	bl	8000da0 <HAL_SYSTICK_CLKSourceConfig>

    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	f04f 30ff 	mov.w	r0, #4294967295
 80006a6:	f000 fb44 	bl	8000d32 <HAL_NVIC_SetPriority>
 80006aa:	e000      	b.n	80006ae <SystemClock_Config_HSE+0x12a>
      return ;
 80006ac:	bf00      	nop
}
 80006ae:	3758      	adds	r7, #88	@ 0x58
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	10624dd3 	.word	0x10624dd3

080006b8 <uart2_init>:

void uart2_init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <uart2_init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <uart2_init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <uart2_init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <uart2_init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <uart2_init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <uart2_init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <uart2_init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <uart2_init+0x4c>)
 80006e4:	220c      	movs	r2, #12
 80006e6:	615a      	str	r2, [r3, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <uart2_init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <uart2_init+0x4c>)
 80006f0:	f002 f8af 	bl	8002852 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <uart2_init+0x46>
	{
		Error_handler();
 80006fa:	f000 f8eb 	bl	80008d4 <Error_handler>
	}

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000038 	.word	0x20000038
 8000708:	40004400 	.word	0x40004400

0800070c <timer2_init>:
void timer2_init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
	htimer2.Instance = TIM2;
 8000712:	4b29      	ldr	r3, [pc, #164]	@ (80007b8 <timer2_init+0xac>)
 8000714:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000718:	601a      	str	r2, [r3, #0]
	htimer2.Init.Prescaler = 1;
 800071a:	4b27      	ldr	r3, [pc, #156]	@ (80007b8 <timer2_init+0xac>)
 800071c:	2201      	movs	r2, #1
 800071e:	605a      	str	r2, [r3, #4]
	htimer2.Init.Period = 0xffffffff;
 8000720:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <timer2_init+0xac>)
 8000722:	f04f 32ff 	mov.w	r2, #4294967295
 8000726:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_OC_Init(&htimer2)!= HAL_OK)
 8000728:	4823      	ldr	r0, [pc, #140]	@ (80007b8 <timer2_init+0xac>)
 800072a:	f001 fadf 	bl	8001cec <HAL_TIM_OC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <timer2_init+0x2c>
	{
		Error_handler();
 8000734:	f000 f8ce 	bl	80008d4 <Error_handler>
	}

	TIM_OC_InitTypeDef timoc_init;

	timoc_init.OCMode = TIM_OCMODE_TOGGLE;
 8000738:	2330      	movs	r3, #48	@ 0x30
 800073a:	607b      	str	r3, [r7, #4]
	timoc_init.Pulse = pulse1_value;
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <timer2_init+0xb0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	60bb      	str	r3, [r7, #8]
	timoc_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]

	if(HAL_TIM_OC_ConfigChannel(&htimer2, &timoc_init, TIM_CHANNEL_1) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	4619      	mov	r1, r3
 800074c:	481a      	ldr	r0, [pc, #104]	@ (80007b8 <timer2_init+0xac>)
 800074e:	f001 fd23 	bl	8002198 <HAL_TIM_OC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <timer2_init+0x50>
	{
		Error_handler();
 8000758:	f000 f8bc 	bl	80008d4 <Error_handler>
	}

	timoc_init.Pulse = pulse2_value;
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <timer2_init+0xb4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &timoc_init, TIM_CHANNEL_2) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2204      	movs	r2, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4813      	ldr	r0, [pc, #76]	@ (80007b8 <timer2_init+0xac>)
 800076a:	f001 fd15 	bl	8002198 <HAL_TIM_OC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <timer2_init+0x6c>
	{
		Error_handler();
 8000774:	f000 f8ae 	bl	80008d4 <Error_handler>
	}

	timoc_init.Pulse = pulse3_value;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <timer2_init+0xb8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &timoc_init, TIM_CHANNEL_3) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2208      	movs	r2, #8
 8000782:	4619      	mov	r1, r3
 8000784:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <timer2_init+0xac>)
 8000786:	f001 fd07 	bl	8002198 <HAL_TIM_OC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <timer2_init+0x88>
	{
		Error_handler();
 8000790:	f000 f8a0 	bl	80008d4 <Error_handler>
	}

	timoc_init.Pulse = pulse4_value;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <timer2_init+0xbc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &timoc_init, TIM_CHANNEL_4) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	220c      	movs	r2, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <timer2_init+0xac>)
 80007a2:	f001 fcf9 	bl	8002198 <HAL_TIM_OC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <timer2_init+0xa4>
	{
		Error_handler();
 80007ac:	f000 f892 	bl	80008d4 <Error_handler>
	}

}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000080 	.word	0x20000080
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000004 	.word	0x20000004
 80007c4:	20000008 	.word	0x20000008
 80007c8:	2000000c 	.word	0x2000000c

080007cc <gpio_init>:
void gpio_init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <gpio_init+0x44>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <gpio_init+0x44>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <gpio_init+0x44>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 80007ee:	2320      	movs	r3, #32
 80007f0:	607b      	str	r3, [r7, #4]
	ledgpio.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	60bb      	str	r3, [r7, #8]
	ledgpio.Speed = GPIO_SPEED_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &ledgpio);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4804      	ldr	r0, [pc, #16]	@ (8000814 <gpio_init+0x48>)
 8000804:	f000 faf6 	bl	8000df4 <HAL_GPIO_Init>

}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40020000 	.word	0x40020000

08000818 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

    if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7f1b      	ldrb	r3, [r3, #28]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10e      	bne.n	8000846 <HAL_TIM_OC_DelayElapsedCallback+0x2e>
    {
      ccr = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8000828:	2100      	movs	r1, #0
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f001 fd10 	bl	8002250 <HAL_TIM_ReadCapturedValue>
 8000830:	4603      	mov	r3, r0
 8000832:	4a23      	ldr	r2, [pc, #140]	@ (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000834:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL_1,ccr+pulse1_value);
 8000836:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000838:	6819      	ldr	r1, [r3, #0]
 800083a:	4b22      	ldr	r3, [pc, #136]	@ (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	440a      	add	r2, r1
 8000844:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7f1b      	ldrb	r3, [r3, #28]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d10e      	bne.n	800086c <HAL_TIM_OC_DelayElapsedCallback+0x54>
    {
      ccr = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_2);
 800084e:	2104      	movs	r1, #4
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f001 fcfd 	bl	8002250 <HAL_TIM_ReadCapturedValue>
 8000856:	4603      	mov	r3, r0
 8000858:	4a19      	ldr	r2, [pc, #100]	@ (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800085a:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL_2,ccr+pulse2_value);
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800085e:	6819      	ldr	r1, [r3, #0]
 8000860:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	440a      	add	r2, r1
 800086a:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	7f1b      	ldrb	r3, [r3, #28]
 8000870:	2b04      	cmp	r3, #4
 8000872:	d10e      	bne.n	8000892 <HAL_TIM_OC_DelayElapsedCallback+0x7a>
    {
      ccr = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_3);
 8000874:	2108      	movs	r1, #8
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f001 fcea 	bl	8002250 <HAL_TIM_ReadCapturedValue>
 800087c:	4603      	mov	r3, r0
 800087e:	4a10      	ldr	r2, [pc, #64]	@ (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000880:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL_3,ccr+pulse3_value);
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000884:	6819      	ldr	r1, [r3, #0]
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	440a      	add	r2, r1
 8000890:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7f1b      	ldrb	r3, [r3, #28]
 8000896:	2b08      	cmp	r3, #8
 8000898:	d10e      	bne.n	80008b8 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
    {
      ccr = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_4);
 800089a:	210c      	movs	r1, #12
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f001 fcd7 	bl	8002250 <HAL_TIM_ReadCapturedValue>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a06      	ldr	r2, [pc, #24]	@ (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 80008a6:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL_4,ccr+pulse4_value);
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 80008aa:	6819      	ldr	r1, [r3, #0]
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	440a      	add	r2, r1
 80008b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000c8 	.word	0x200000c8
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000004 	.word	0x20000004
 80008cc:	20000008 	.word	0x20000008
 80008d0:	2000000c 	.word	0x2000000c

080008d4 <Error_handler>:

void Error_handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
	while(1);
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_handler+0x4>

080008dc <HAL_MspInit>:
 */

#include "mainb.h"

void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 fa1b 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

	SCB->SHCSR |= 0x7 << 16;
 80008e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <HAL_MspInit+0x34>)
 80008e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ea:	4a09      	ldr	r2, [pc, #36]	@ (8000910 <HAL_MspInit+0x34>)
 80008ec:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80008f0:	6253      	str	r3, [r2, #36]	@ 0x24

	HAL_NVIC_EnableIRQ(BusFault_IRQn);
 80008f2:	f06f 000a 	mvn.w	r0, #10
 80008f6:	f000 fa38 	bl	8000d6a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(UsageFault_IRQn);
 80008fa:	f06f 0009 	mvn.w	r0, #9
 80008fe:	f000 fa34 	bl	8000d6a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(MemoryManagement_IRQn);
 8000902:	f06f 000b 	mvn.w	r0, #11
 8000906:	f000 fa30 	bl	8000d6a <HAL_NVIC_EnableIRQ>

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_USART2_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <HAL_UART_MspInit+0x78>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000924:	4a19      	ldr	r2, [pc, #100]	@ (800098c <HAL_UART_MspInit+0x78>)
 8000926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800092a:	6413      	str	r3, [r2, #64]	@ 0x40
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <HAL_UART_MspInit+0x78>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <HAL_UART_MspInit+0x78>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000940:	4a12      	ldr	r2, [pc, #72]	@ (800098c <HAL_UART_MspInit+0x78>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6313      	str	r3, [r2, #48]	@ 0x30
 8000948:	4b10      	ldr	r3, [pc, #64]	@ (800098c <HAL_UART_MspInit+0x78>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitTypeDef gpiou;
	gpiou.Pin = GPIO_PIN_2;
 8000954:	2304      	movs	r3, #4
 8000956:	617b      	str	r3, [r7, #20]
	gpiou.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
	gpiou.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
	gpiou.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
	gpiou.Alternate =GPIO_AF7_USART2;
 8000964:	2307      	movs	r3, #7
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpiou);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4808      	ldr	r0, [pc, #32]	@ (8000990 <HAL_UART_MspInit+0x7c>)
 8000970:	f000 fa40 	bl	8000df4 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000974:	2026      	movs	r0, #38	@ 0x26
 8000976:	f000 f9f8 	bl	8000d6a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210f      	movs	r1, #15
 800097e:	2026      	movs	r0, #38	@ 0x26
 8000980:	f000 f9d7 	bl	8000d32 <HAL_NVIC_SetPriority>
}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	@ 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000

08000994 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <HAL_TIM_OC_MspInit+0x80>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <HAL_TIM_OC_MspInit+0x80>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ac:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <HAL_TIM_OC_MspInit+0x80>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpioc;
	gpioc.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80009b8:	2303      	movs	r3, #3
 80009ba:	60fb      	str	r3, [r7, #12]
	gpioc.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	613b      	str	r3, [r7, #16]
	gpioc.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
	gpioc.Alternate = GPIO_AF1_TIM2;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
	gpioc.Speed = GPIO_SPEED_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpioc);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	4811      	ldr	r0, [pc, #68]	@ (8000a18 <HAL_TIM_OC_MspInit+0x84>)
 80009d4:	f000 fa0e 	bl	8000df4 <HAL_GPIO_Init>

	gpioc.Pin = GPIO_PIN_2 | GPIO_PIN_10;
 80009d8:	f240 4304 	movw	r3, #1028	@ 0x404
 80009dc:	60fb      	str	r3, [r7, #12]
	gpioc.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	613b      	str	r3, [r7, #16]
	gpioc.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
	gpioc.Alternate = GPIO_AF1_TIM2;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61fb      	str	r3, [r7, #28]
	gpioc.Speed = GPIO_SPEED_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &gpioc);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <HAL_TIM_OC_MspInit+0x88>)
 80009f6:	f000 f9fd 	bl	8000df4 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009fa:	201c      	movs	r0, #28
 80009fc:	f000 f9b5 	bl	8000d6a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	210f      	movs	r1, #15
 8000a04:	201c      	movs	r0, #28
 8000a06:	f000 f994 	bl	8000d32 <HAL_NVIC_SetPriority>

}
 8000a0a:	bf00      	nop
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	40020400 	.word	0x40020400

08000a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	@ (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a48:	f7ff ffea 	bl	8000a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	@ (8000a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	@ (8000a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	@ (8000a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f002 f9b3 	bl	8002ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fd4f 	bl	8000518 <main>
  bx  lr    
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a88:	08002e64 	.word	0x08002e64
  ldr r2, =_sbss
 8000a8c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a90:	200000d0 	.word	0x200000d0

08000a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <HAL_Init+0x40>)
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <HAL_Init+0x40>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	@ (8000ad8 <HAL_Init+0x40>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f92b 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff ff06 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f943 	bl	8000d86 <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f90b 	bl	8000d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	@ (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000010 	.word	0x20000010
 8000b34:	20000018 	.word	0x20000018
 8000b38:	20000014 	.word	0x20000014

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000018 	.word	0x20000018
 8000b60:	200000cc 	.word	0x200000cc

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	@ (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	200000cc 	.word	0x200000cc

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	@ (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	@ (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	@ 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	@ 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f7ff ff8e 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff29 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d44:	f7ff ff3e 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f7ff ff8e 	bl	8000c70 <NVIC_EncodePriority>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff5d 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff31 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffa2 	bl	8000cd8 <SysTick_Config>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d106      	bne.n	8000dbc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a08      	ldr	r2, [pc, #32]	@ (8000dd4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000dba:	e005      	b.n	8000dc8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000dc2:	f023 0304 	bic.w	r3, r3, #4
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ddc:	f000 f802 	bl	8000de4 <HAL_SYSTICK_Callback>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	@ 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e165      	b.n	80010dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 8154 	bne.w	80010d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d005      	beq.n	8000e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d130      	bne.n	8000ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	f003 0201 	and.w	r2, r3, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d017      	beq.n	8000ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	69b9      	ldr	r1, [r7, #24]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80ae 	beq.w	80010d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80010f4 <HAL_GPIO_Init+0x300>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	4a5c      	ldr	r2, [pc, #368]	@ (80010f4 <HAL_GPIO_Init+0x300>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8a:	4b5a      	ldr	r3, [pc, #360]	@ (80010f4 <HAL_GPIO_Init+0x300>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f96:	4a58      	ldr	r2, [pc, #352]	@ (80010f8 <HAL_GPIO_Init+0x304>)
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4f      	ldr	r2, [pc, #316]	@ (80010fc <HAL_GPIO_Init+0x308>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d025      	beq.n	800100e <HAL_GPIO_Init+0x21a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4e      	ldr	r2, [pc, #312]	@ (8001100 <HAL_GPIO_Init+0x30c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d01f      	beq.n	800100a <HAL_GPIO_Init+0x216>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4d      	ldr	r2, [pc, #308]	@ (8001104 <HAL_GPIO_Init+0x310>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d019      	beq.n	8001006 <HAL_GPIO_Init+0x212>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4c      	ldr	r2, [pc, #304]	@ (8001108 <HAL_GPIO_Init+0x314>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0x20e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800110c <HAL_GPIO_Init+0x318>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_GPIO_Init+0x20a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4a      	ldr	r2, [pc, #296]	@ (8001110 <HAL_GPIO_Init+0x31c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x206>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a49      	ldr	r2, [pc, #292]	@ (8001114 <HAL_GPIO_Init+0x320>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_GPIO_Init+0x202>
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	e00c      	b.n	8001010 <HAL_GPIO_Init+0x21c>
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	e00a      	b.n	8001010 <HAL_GPIO_Init+0x21c>
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	e008      	b.n	8001010 <HAL_GPIO_Init+0x21c>
 8000ffe:	2304      	movs	r3, #4
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x21c>
 8001002:	2303      	movs	r3, #3
 8001004:	e004      	b.n	8001010 <HAL_GPIO_Init+0x21c>
 8001006:	2302      	movs	r3, #2
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x21c>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x21c>
 800100e:	2300      	movs	r3, #0
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	f002 0203 	and.w	r2, r2, #3
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	4093      	lsls	r3, r2
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001020:	4935      	ldr	r1, [pc, #212]	@ (80010f8 <HAL_GPIO_Init+0x304>)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102e:	4b3a      	ldr	r3, [pc, #232]	@ (8001118 <HAL_GPIO_Init+0x324>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001052:	4a31      	ldr	r2, [pc, #196]	@ (8001118 <HAL_GPIO_Init+0x324>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001058:	4b2f      	ldr	r3, [pc, #188]	@ (8001118 <HAL_GPIO_Init+0x324>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800107c:	4a26      	ldr	r2, [pc, #152]	@ (8001118 <HAL_GPIO_Init+0x324>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001082:	4b25      	ldr	r3, [pc, #148]	@ (8001118 <HAL_GPIO_Init+0x324>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001118 <HAL_GPIO_Init+0x324>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <HAL_GPIO_Init+0x324>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d0:	4a11      	ldr	r2, [pc, #68]	@ (8001118 <HAL_GPIO_Init+0x324>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3301      	adds	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	f67f ae96 	bls.w	8000e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3724      	adds	r7, #36	@ 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40020400 	.word	0x40020400
 8001104:	40020800 	.word	0x40020800
 8001108:	40020c00 	.word	0x40020c00
 800110c:	40021000 	.word	0x40021000
 8001110:	40021400 	.word	0x40021400
 8001114:	40021800 	.word	0x40021800
 8001118:	40013c00 	.word	0x40013c00

0800111c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0cc      	b.n	80012ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001130:	4b68      	ldr	r3, [pc, #416]	@ (80012d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d90c      	bls.n	8001158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113e:	4b65      	ldr	r3, [pc, #404]	@ (80012d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001146:	4b63      	ldr	r3, [pc, #396]	@ (80012d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e0b8      	b.n	80012ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d020      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001170:	4b59      	ldr	r3, [pc, #356]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	4a58      	ldr	r2, [pc, #352]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800117a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001188:	4b53      	ldr	r3, [pc, #332]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4a52      	ldr	r2, [pc, #328]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001194:	4b50      	ldr	r3, [pc, #320]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	494d      	ldr	r1, [pc, #308]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d044      	beq.n	800123c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d107      	bne.n	80011ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4b47      	ldr	r3, [pc, #284]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d119      	bne.n	80011fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e07f      	b.n	80012ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d003      	beq.n	80011da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d107      	bne.n	80011ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011da:	4b3f      	ldr	r3, [pc, #252]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d109      	bne.n	80011fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e06f      	b.n	80012ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ea:	4b3b      	ldr	r3, [pc, #236]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e067      	b.n	80012ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011fa:	4b37      	ldr	r3, [pc, #220]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f023 0203 	bic.w	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4934      	ldr	r1, [pc, #208]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	4313      	orrs	r3, r2
 800120a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800120c:	f7ff fcaa 	bl	8000b64 <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001212:	e00a      	b.n	800122a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001214:	f7ff fca6 	bl	8000b64 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001222:	4293      	cmp	r3, r2
 8001224:	d901      	bls.n	800122a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e04f      	b.n	80012ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122a:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 020c 	and.w	r2, r3, #12
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	429a      	cmp	r2, r3
 800123a:	d1eb      	bne.n	8001214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800123c:	4b25      	ldr	r3, [pc, #148]	@ (80012d4 <HAL_RCC_ClockConfig+0x1b8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 030f 	and.w	r3, r3, #15
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d20c      	bcs.n	8001264 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800124a:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <HAL_RCC_ClockConfig+0x1b8>)
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d001      	beq.n	8001264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e032      	b.n	80012ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	4916      	ldr	r1, [pc, #88]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 800127e:	4313      	orrs	r3, r2
 8001280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d009      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800128e:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	490e      	ldr	r1, [pc, #56]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012a2:	f000 f855 	bl	8001350 <HAL_RCC_GetSysClockFreq>
 80012a6:	4602      	mov	r2, r0
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	490a      	ldr	r1, [pc, #40]	@ (80012dc <HAL_RCC_ClockConfig+0x1c0>)
 80012b4:	5ccb      	ldrb	r3, [r1, r3]
 80012b6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ba:	4a09      	ldr	r2, [pc, #36]	@ (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <HAL_RCC_ClockConfig+0x1c8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fc0a 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023c00 	.word	0x40023c00
 80012d8:	40023800 	.word	0x40023800
 80012dc:	08002e3c 	.word	0x08002e3c
 80012e0:	20000010 	.word	0x20000010
 80012e4:	20000014 	.word	0x20000014

080012e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <HAL_RCC_GetHCLKFreq+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000010 	.word	0x20000010

08001300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001304:	f7ff fff0 	bl	80012e8 <HAL_RCC_GetHCLKFreq>
 8001308:	4602      	mov	r2, r0
 800130a:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	0a9b      	lsrs	r3, r3, #10
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	4903      	ldr	r1, [pc, #12]	@ (8001324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001316:	5ccb      	ldrb	r3, [r1, r3]
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	08002e4c 	.word	0x08002e4c

08001328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800132c:	f7ff ffdc 	bl	80012e8 <HAL_RCC_GetHCLKFreq>
 8001330:	4602      	mov	r2, r0
 8001332:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	0b5b      	lsrs	r3, r3, #13
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	4903      	ldr	r1, [pc, #12]	@ (800134c <HAL_RCC_GetPCLK2Freq+0x24>)
 800133e:	5ccb      	ldrb	r3, [r1, r3]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001344:	4618      	mov	r0, r3
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	08002e4c 	.word	0x08002e4c

08001350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001354:	b0ae      	sub	sp, #184	@ 0xb8
 8001356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001376:	4bcb      	ldr	r3, [pc, #812]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b0c      	cmp	r3, #12
 8001380:	f200 8206 	bhi.w	8001790 <HAL_RCC_GetSysClockFreq+0x440>
 8001384:	a201      	add	r2, pc, #4	@ (adr r2, 800138c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138a:	bf00      	nop
 800138c:	080013c1 	.word	0x080013c1
 8001390:	08001791 	.word	0x08001791
 8001394:	08001791 	.word	0x08001791
 8001398:	08001791 	.word	0x08001791
 800139c:	080013c9 	.word	0x080013c9
 80013a0:	08001791 	.word	0x08001791
 80013a4:	08001791 	.word	0x08001791
 80013a8:	08001791 	.word	0x08001791
 80013ac:	080013d1 	.word	0x080013d1
 80013b0:	08001791 	.word	0x08001791
 80013b4:	08001791 	.word	0x08001791
 80013b8:	08001791 	.word	0x08001791
 80013bc:	080015c1 	.word	0x080015c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013c0:	4bb9      	ldr	r3, [pc, #740]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80013c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013c6:	e1e7      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013c8:	4bb8      	ldr	r3, [pc, #736]	@ (80016ac <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013ce:	e1e3      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013d0:	4bb4      	ldr	r3, [pc, #720]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013dc:	4bb1      	ldr	r3, [pc, #708]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d071      	beq.n	80014cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e8:	4bae      	ldr	r3, [pc, #696]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	099b      	lsrs	r3, r3, #6
 80013ee:	2200      	movs	r2, #0
 80013f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013f4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80013f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001400:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800140a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800140e:	4622      	mov	r2, r4
 8001410:	462b      	mov	r3, r5
 8001412:	f04f 0000 	mov.w	r0, #0
 8001416:	f04f 0100 	mov.w	r1, #0
 800141a:	0159      	lsls	r1, r3, #5
 800141c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001420:	0150      	lsls	r0, r2, #5
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4621      	mov	r1, r4
 8001428:	1a51      	subs	r1, r2, r1
 800142a:	6439      	str	r1, [r7, #64]	@ 0x40
 800142c:	4629      	mov	r1, r5
 800142e:	eb63 0301 	sbc.w	r3, r3, r1
 8001432:	647b      	str	r3, [r7, #68]	@ 0x44
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001440:	4649      	mov	r1, r9
 8001442:	018b      	lsls	r3, r1, #6
 8001444:	4641      	mov	r1, r8
 8001446:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800144a:	4641      	mov	r1, r8
 800144c:	018a      	lsls	r2, r1, #6
 800144e:	4641      	mov	r1, r8
 8001450:	1a51      	subs	r1, r2, r1
 8001452:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001454:	4649      	mov	r1, r9
 8001456:	eb63 0301 	sbc.w	r3, r3, r1
 800145a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001468:	4649      	mov	r1, r9
 800146a:	00cb      	lsls	r3, r1, #3
 800146c:	4641      	mov	r1, r8
 800146e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001472:	4641      	mov	r1, r8
 8001474:	00ca      	lsls	r2, r1, #3
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	4603      	mov	r3, r0
 800147c:	4622      	mov	r2, r4
 800147e:	189b      	adds	r3, r3, r2
 8001480:	633b      	str	r3, [r7, #48]	@ 0x30
 8001482:	462b      	mov	r3, r5
 8001484:	460a      	mov	r2, r1
 8001486:	eb42 0303 	adc.w	r3, r2, r3
 800148a:	637b      	str	r3, [r7, #52]	@ 0x34
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001498:	4629      	mov	r1, r5
 800149a:	024b      	lsls	r3, r1, #9
 800149c:	4621      	mov	r1, r4
 800149e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014a2:	4621      	mov	r1, r4
 80014a4:	024a      	lsls	r2, r1, #9
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014ae:	2200      	movs	r2, #0
 80014b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80014bc:	f7fe fea2 	bl	8000204 <__aeabi_uldivmod>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4613      	mov	r3, r2
 80014c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014ca:	e067      	b.n	800159c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014cc:	4b75      	ldr	r3, [pc, #468]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	099b      	lsrs	r3, r3, #6
 80014d2:	2200      	movs	r2, #0
 80014d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014d8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014e6:	2300      	movs	r3, #0
 80014e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014ee:	4622      	mov	r2, r4
 80014f0:	462b      	mov	r3, r5
 80014f2:	f04f 0000 	mov.w	r0, #0
 80014f6:	f04f 0100 	mov.w	r1, #0
 80014fa:	0159      	lsls	r1, r3, #5
 80014fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001500:	0150      	lsls	r0, r2, #5
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4621      	mov	r1, r4
 8001508:	1a51      	subs	r1, r2, r1
 800150a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800150c:	4629      	mov	r1, r5
 800150e:	eb63 0301 	sbc.w	r3, r3, r1
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001520:	4649      	mov	r1, r9
 8001522:	018b      	lsls	r3, r1, #6
 8001524:	4641      	mov	r1, r8
 8001526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800152a:	4641      	mov	r1, r8
 800152c:	018a      	lsls	r2, r1, #6
 800152e:	4641      	mov	r1, r8
 8001530:	ebb2 0a01 	subs.w	sl, r2, r1
 8001534:	4649      	mov	r1, r9
 8001536:	eb63 0b01 	sbc.w	fp, r3, r1
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001546:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800154a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800154e:	4692      	mov	sl, r2
 8001550:	469b      	mov	fp, r3
 8001552:	4623      	mov	r3, r4
 8001554:	eb1a 0303 	adds.w	r3, sl, r3
 8001558:	623b      	str	r3, [r7, #32]
 800155a:	462b      	mov	r3, r5
 800155c:	eb4b 0303 	adc.w	r3, fp, r3
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800156e:	4629      	mov	r1, r5
 8001570:	028b      	lsls	r3, r1, #10
 8001572:	4621      	mov	r1, r4
 8001574:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001578:	4621      	mov	r1, r4
 800157a:	028a      	lsls	r2, r1, #10
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001584:	2200      	movs	r2, #0
 8001586:	673b      	str	r3, [r7, #112]	@ 0x70
 8001588:	677a      	str	r2, [r7, #116]	@ 0x74
 800158a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800158e:	f7fe fe39 	bl	8000204 <__aeabi_uldivmod>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4613      	mov	r3, r2
 8001598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800159c:	4b41      	ldr	r3, [pc, #260]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0x354>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	0c1b      	lsrs	r3, r3, #16
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	3301      	adds	r3, #1
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80015ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015be:	e0eb      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c0:	4b38      	ldr	r3, [pc, #224]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015cc:	4b35      	ldr	r3, [pc, #212]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d06b      	beq.n	80016b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d8:	4b32      	ldr	r3, [pc, #200]	@ (80016a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	099b      	lsrs	r3, r3, #6
 80015de:	2200      	movs	r2, #0
 80015e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80015ec:	2300      	movs	r3, #0
 80015ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80015f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015f4:	4622      	mov	r2, r4
 80015f6:	462b      	mov	r3, r5
 80015f8:	f04f 0000 	mov.w	r0, #0
 80015fc:	f04f 0100 	mov.w	r1, #0
 8001600:	0159      	lsls	r1, r3, #5
 8001602:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001606:	0150      	lsls	r0, r2, #5
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4621      	mov	r1, r4
 800160e:	1a51      	subs	r1, r2, r1
 8001610:	61b9      	str	r1, [r7, #24]
 8001612:	4629      	mov	r1, r5
 8001614:	eb63 0301 	sbc.w	r3, r3, r1
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001626:	4659      	mov	r1, fp
 8001628:	018b      	lsls	r3, r1, #6
 800162a:	4651      	mov	r1, sl
 800162c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001630:	4651      	mov	r1, sl
 8001632:	018a      	lsls	r2, r1, #6
 8001634:	4651      	mov	r1, sl
 8001636:	ebb2 0801 	subs.w	r8, r2, r1
 800163a:	4659      	mov	r1, fp
 800163c:	eb63 0901 	sbc.w	r9, r3, r1
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800164c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001650:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001654:	4690      	mov	r8, r2
 8001656:	4699      	mov	r9, r3
 8001658:	4623      	mov	r3, r4
 800165a:	eb18 0303 	adds.w	r3, r8, r3
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	462b      	mov	r3, r5
 8001662:	eb49 0303 	adc.w	r3, r9, r3
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001674:	4629      	mov	r1, r5
 8001676:	024b      	lsls	r3, r1, #9
 8001678:	4621      	mov	r1, r4
 800167a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800167e:	4621      	mov	r1, r4
 8001680:	024a      	lsls	r2, r1, #9
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800168a:	2200      	movs	r2, #0
 800168c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800168e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001690:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001694:	f7fe fdb6 	bl	8000204 <__aeabi_uldivmod>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4613      	mov	r3, r2
 800169e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016a2:	e065      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0x420>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	00f42400 	.word	0x00f42400
 80016ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b0:	4b3d      	ldr	r3, [pc, #244]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x458>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	099b      	lsrs	r3, r3, #6
 80016b6:	2200      	movs	r2, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	4611      	mov	r1, r2
 80016bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80016c2:	2300      	movs	r3, #0
 80016c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80016c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016ca:	4642      	mov	r2, r8
 80016cc:	464b      	mov	r3, r9
 80016ce:	f04f 0000 	mov.w	r0, #0
 80016d2:	f04f 0100 	mov.w	r1, #0
 80016d6:	0159      	lsls	r1, r3, #5
 80016d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016dc:	0150      	lsls	r0, r2, #5
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4641      	mov	r1, r8
 80016e4:	1a51      	subs	r1, r2, r1
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	4649      	mov	r1, r9
 80016ea:	eb63 0301 	sbc.w	r3, r3, r1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016fc:	4659      	mov	r1, fp
 80016fe:	018b      	lsls	r3, r1, #6
 8001700:	4651      	mov	r1, sl
 8001702:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001706:	4651      	mov	r1, sl
 8001708:	018a      	lsls	r2, r1, #6
 800170a:	4651      	mov	r1, sl
 800170c:	1a54      	subs	r4, r2, r1
 800170e:	4659      	mov	r1, fp
 8001710:	eb63 0501 	sbc.w	r5, r3, r1
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	00eb      	lsls	r3, r5, #3
 800171e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001722:	00e2      	lsls	r2, r4, #3
 8001724:	4614      	mov	r4, r2
 8001726:	461d      	mov	r5, r3
 8001728:	4643      	mov	r3, r8
 800172a:	18e3      	adds	r3, r4, r3
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	464b      	mov	r3, r9
 8001730:	eb45 0303 	adc.w	r3, r5, r3
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001742:	4629      	mov	r1, r5
 8001744:	028b      	lsls	r3, r1, #10
 8001746:	4621      	mov	r1, r4
 8001748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800174c:	4621      	mov	r1, r4
 800174e:	028a      	lsls	r2, r1, #10
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001758:	2200      	movs	r2, #0
 800175a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800175c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800175e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001762:	f7fe fd4f 	bl	8000204 <__aeabi_uldivmod>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4613      	mov	r3, r2
 800176c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001770:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	0f1b      	lsrs	r3, r3, #28
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800177e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001782:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800178e:	e003      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x45c>)
 8001792:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001796:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001798:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800179c:	4618      	mov	r0, r3
 800179e:	37b8      	adds	r7, #184	@ 0xb8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	00f42400 	.word	0x00f42400

080017b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e28d      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8083 	beq.w	80018d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017d0:	4b94      	ldr	r3, [pc, #592]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d019      	beq.n	8001810 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017dc:	4b91      	ldr	r3, [pc, #580]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 030c 	and.w	r3, r3, #12
        || \
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017e8:	4b8e      	ldr	r3, [pc, #568]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017f4:	d00c      	beq.n	8001810 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d112      	bne.n	8001828 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001802:	4b88      	ldr	r3, [pc, #544]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800180e:	d10b      	bne.n	8001828 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	4b84      	ldr	r3, [pc, #528]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d05b      	beq.n	80018d4 <HAL_RCC_OscConfig+0x124>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d157      	bne.n	80018d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e25a      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001830:	d106      	bne.n	8001840 <HAL_RCC_OscConfig+0x90>
 8001832:	4b7c      	ldr	r3, [pc, #496]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a7b      	ldr	r2, [pc, #492]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e01d      	b.n	800187c <HAL_RCC_OscConfig+0xcc>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0xb4>
 800184a:	4b76      	ldr	r3, [pc, #472]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a75      	ldr	r2, [pc, #468]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b73      	ldr	r3, [pc, #460]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a72      	ldr	r2, [pc, #456]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0xcc>
 8001864:	4b6f      	ldr	r3, [pc, #444]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6e      	ldr	r2, [pc, #440]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b6c      	ldr	r3, [pc, #432]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a6b      	ldr	r2, [pc, #428]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800187a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff f96e 	bl	8000b64 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff f96a 	bl	8000b64 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	@ 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e21f      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b61      	ldr	r3, [pc, #388]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0xdc>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff f95a 	bl	8000b64 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff f956 	bl	8000b64 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	@ 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e20b      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	4b57      	ldr	r3, [pc, #348]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x104>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d06f      	beq.n	80019c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018e2:	4b50      	ldr	r3, [pc, #320]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d017      	beq.n	800191e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
        || \
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d105      	bne.n	8001906 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001906:	4b47      	ldr	r3, [pc, #284]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d11c      	bne.n	800194c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001912:	4b44      	ldr	r3, [pc, #272]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d116      	bne.n	800194c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	4b41      	ldr	r3, [pc, #260]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x186>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e1d3      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b3b      	ldr	r3, [pc, #236]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4937      	ldr	r1, [pc, #220]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	e03a      	b.n	80019c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001954:	4b34      	ldr	r3, [pc, #208]	@ (8001a28 <HAL_RCC_OscConfig+0x278>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff f903 	bl	8000b64 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff f8ff 	bl	8000b64 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e1b4      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	4b2b      	ldr	r3, [pc, #172]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b28      	ldr	r3, [pc, #160]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4925      	ldr	r1, [pc, #148]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b24      	ldr	r3, [pc, #144]	@ (8001a28 <HAL_RCC_OscConfig+0x278>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f8e2 	bl	8000b64 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a4:	f7ff f8de 	bl	8000b64 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e193      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d036      	beq.n	8001a3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d016      	beq.n	8001a04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_RCC_OscConfig+0x27c>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7ff f8c2 	bl	8000b64 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff f8be 	bl	8000b64 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e173      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 80019f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x234>
 8001a02:	e01b      	b.n	8001a3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_RCC_OscConfig+0x27c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f8ab 	bl	8000b64 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	e00e      	b.n	8001a30 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff f8a7 	bl	8000b64 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d907      	bls.n	8001a30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e15c      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
 8001a24:	40023800 	.word	0x40023800
 8001a28:	42470000 	.word	0x42470000
 8001a2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a30:	4b8a      	ldr	r3, [pc, #552]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ea      	bne.n	8001a12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 8097 	beq.w	8001b78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4e:	4b83      	ldr	r3, [pc, #524]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10f      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	4a7e      	ldr	r2, [pc, #504]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a76:	2301      	movs	r3, #1
 8001a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b79      	ldr	r3, [pc, #484]	@ (8001c60 <HAL_RCC_OscConfig+0x4b0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a86:	4b76      	ldr	r3, [pc, #472]	@ (8001c60 <HAL_RCC_OscConfig+0x4b0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a75      	ldr	r2, [pc, #468]	@ (8001c60 <HAL_RCC_OscConfig+0x4b0>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7ff f867 	bl	8000b64 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9a:	f7ff f863 	bl	8000b64 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e118      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b6c      	ldr	r3, [pc, #432]	@ (8001c60 <HAL_RCC_OscConfig+0x4b0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x31e>
 8001ac0:	4b66      	ldr	r3, [pc, #408]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac4:	4a65      	ldr	r2, [pc, #404]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001acc:	e01c      	b.n	8001b08 <HAL_RCC_OscConfig+0x358>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b05      	cmp	r3, #5
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x340>
 8001ad6:	4b61      	ldr	r3, [pc, #388]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ada:	4a60      	ldr	r2, [pc, #384]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ae2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae6:	4a5d      	ldr	r2, [pc, #372]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aee:	e00b      	b.n	8001b08 <HAL_RCC_OscConfig+0x358>
 8001af0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af4:	4a59      	ldr	r2, [pc, #356]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001afc:	4b57      	ldr	r3, [pc, #348]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b00:	4a56      	ldr	r2, [pc, #344]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001b02:	f023 0304 	bic.w	r3, r3, #4
 8001b06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d015      	beq.n	8001b3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff f828 	bl	8000b64 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7ff f824 	bl	8000b64 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e0d7      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0ee      	beq.n	8001b18 <HAL_RCC_OscConfig+0x368>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f812 	bl	8000b64 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f80e 	bl	8000b64 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0c1      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5a:	4b40      	ldr	r3, [pc, #256]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ee      	bne.n	8001b44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	4a3a      	ldr	r2, [pc, #232]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80ad 	beq.w	8001cdc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b82:	4b36      	ldr	r3, [pc, #216]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d060      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d145      	bne.n	8001c22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b96:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <HAL_RCC_OscConfig+0x4b4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7fe ffe2 	bl	8000b64 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7fe ffde 	bl	8000b64 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e093      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69da      	ldr	r2, [r3, #28]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	019b      	lsls	r3, r3, #6
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	041b      	lsls	r3, r3, #16
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	071b      	lsls	r3, r3, #28
 8001bee:	491b      	ldr	r1, [pc, #108]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_RCC_OscConfig+0x4b4>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7fe ffb3 	bl	8000b64 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7fe ffaf 	bl	8000b64 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e064      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x452>
 8001c20:	e05c      	b.n	8001cdc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <HAL_RCC_OscConfig+0x4b4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7fe ff9c 	bl	8000b64 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7fe ff98 	bl	8000b64 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e04d      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x480>
 8001c4e:	e045      	b.n	8001cdc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d107      	bne.n	8001c68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e040      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000
 8001c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <HAL_RCC_OscConfig+0x538>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d030      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d129      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d122      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c98:	4013      	ands	r3, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d119      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d10f      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d107      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800

08001cec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e041      	b.n	8001d82 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe fe3e 	bl	8000994 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3304      	adds	r3, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f000 fafc 	bl	8002328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d109      	bne.n	8001db4 <HAL_TIM_OC_Start_IT+0x28>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	e022      	b.n	8001dfa <HAL_TIM_OC_Start_IT+0x6e>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d109      	bne.n	8001dce <HAL_TIM_OC_Start_IT+0x42>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	bf14      	ite	ne
 8001dc6:	2301      	movne	r3, #1
 8001dc8:	2300      	moveq	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	e015      	b.n	8001dfa <HAL_TIM_OC_Start_IT+0x6e>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d109      	bne.n	8001de8 <HAL_TIM_OC_Start_IT+0x5c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	bf14      	ite	ne
 8001de0:	2301      	movne	r3, #1
 8001de2:	2300      	moveq	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e008      	b.n	8001dfa <HAL_TIM_OC_Start_IT+0x6e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0c7      	b.n	8001f92 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d104      	bne.n	8001e12 <HAL_TIM_OC_Start_IT+0x86>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e10:	e013      	b.n	8001e3a <HAL_TIM_OC_Start_IT+0xae>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d104      	bne.n	8001e22 <HAL_TIM_OC_Start_IT+0x96>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e20:	e00b      	b.n	8001e3a <HAL_TIM_OC_Start_IT+0xae>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d104      	bne.n	8001e32 <HAL_TIM_OC_Start_IT+0xa6>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e30:	e003      	b.n	8001e3a <HAL_TIM_OC_Start_IT+0xae>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b0c      	cmp	r3, #12
 8001e3e:	d841      	bhi.n	8001ec4 <HAL_TIM_OC_Start_IT+0x138>
 8001e40:	a201      	add	r2, pc, #4	@ (adr r2, 8001e48 <HAL_TIM_OC_Start_IT+0xbc>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	08001e7d 	.word	0x08001e7d
 8001e4c:	08001ec5 	.word	0x08001ec5
 8001e50:	08001ec5 	.word	0x08001ec5
 8001e54:	08001ec5 	.word	0x08001ec5
 8001e58:	08001e8f 	.word	0x08001e8f
 8001e5c:	08001ec5 	.word	0x08001ec5
 8001e60:	08001ec5 	.word	0x08001ec5
 8001e64:	08001ec5 	.word	0x08001ec5
 8001e68:	08001ea1 	.word	0x08001ea1
 8001e6c:	08001ec5 	.word	0x08001ec5
 8001e70:	08001ec5 	.word	0x08001ec5
 8001e74:	08001ec5 	.word	0x08001ec5
 8001e78:	08001eb3 	.word	0x08001eb3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0202 	orr.w	r2, r2, #2
 8001e8a:	60da      	str	r2, [r3, #12]
      break;
 8001e8c:	e01d      	b.n	8001eca <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0204 	orr.w	r2, r2, #4
 8001e9c:	60da      	str	r2, [r3, #12]
      break;
 8001e9e:	e014      	b.n	8001eca <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0208 	orr.w	r2, r2, #8
 8001eae:	60da      	str	r2, [r3, #12]
      break;
 8001eb0:	e00b      	b.n	8001eca <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0210 	orr.w	r2, r2, #16
 8001ec0:	60da      	str	r2, [r3, #12]
      break;
 8001ec2:	e002      	b.n	8001eca <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec8:	bf00      	nop
  }

  if (status == HAL_OK)
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d15f      	bne.n	8001f90 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	6839      	ldr	r1, [r7, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fc81 	bl	80027e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f9c <HAL_TIM_OC_Start_IT+0x210>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d004      	beq.n	8001ef2 <HAL_TIM_OC_Start_IT+0x166>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa0 <HAL_TIM_OC_Start_IT+0x214>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_TIM_OC_Start_IT+0x16a>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_TIM_OC_Start_IT+0x16c>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f0a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a22      	ldr	r2, [pc, #136]	@ (8001f9c <HAL_TIM_OC_Start_IT+0x210>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d022      	beq.n	8001f5c <HAL_TIM_OC_Start_IT+0x1d0>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f1e:	d01d      	beq.n	8001f5c <HAL_TIM_OC_Start_IT+0x1d0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa4 <HAL_TIM_OC_Start_IT+0x218>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d018      	beq.n	8001f5c <HAL_TIM_OC_Start_IT+0x1d0>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa8 <HAL_TIM_OC_Start_IT+0x21c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <HAL_TIM_OC_Start_IT+0x1d0>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	@ (8001fac <HAL_TIM_OC_Start_IT+0x220>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00e      	beq.n	8001f5c <HAL_TIM_OC_Start_IT+0x1d0>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a17      	ldr	r2, [pc, #92]	@ (8001fa0 <HAL_TIM_OC_Start_IT+0x214>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d009      	beq.n	8001f5c <HAL_TIM_OC_Start_IT+0x1d0>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a18      	ldr	r2, [pc, #96]	@ (8001fb0 <HAL_TIM_OC_Start_IT+0x224>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d004      	beq.n	8001f5c <HAL_TIM_OC_Start_IT+0x1d0>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a17      	ldr	r2, [pc, #92]	@ (8001fb4 <HAL_TIM_OC_Start_IT+0x228>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d111      	bne.n	8001f80 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d010      	beq.n	8001f90 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0201 	orr.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f7e:	e007      	b.n	8001f90 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40010400 	.word	0x40010400
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40000800 	.word	0x40000800
 8001fac:	40000c00 	.word	0x40000c00
 8001fb0:	40014000 	.word	0x40014000
 8001fb4:	40001800 	.word	0x40001800

08001fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d020      	beq.n	800201c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01b      	beq.n	800201c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0202 	mvn.w	r2, #2
 8001fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f972 	bl	80022ec <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fc04 	bl	8000818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f975 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d020      	beq.n	8002068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01b      	beq.n	8002068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0204 	mvn.w	r2, #4
 8002038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2202      	movs	r2, #2
 800203e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f94c 	bl	80022ec <HAL_TIM_IC_CaptureCallback>
 8002054:	e005      	b.n	8002062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fbde 	bl	8000818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f94f 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d020      	beq.n	80020b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01b      	beq.n	80020b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0208 	mvn.w	r2, #8
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2204      	movs	r2, #4
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f926 	bl	80022ec <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fbb8 	bl	8000818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f929 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d020      	beq.n	8002100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0210 	mvn.w	r2, #16
 80020d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2208      	movs	r2, #8
 80020d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f900 	bl	80022ec <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fb92 	bl	8000818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f903 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00c      	beq.n	8002124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0201 	mvn.w	r2, #1
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f8da 	bl	80022d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00c      	beq.n	8002148 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fb7b 	bl	800283e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00c      	beq.n	800216c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f8d4 	bl	8002314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0220 	mvn.w	r2, #32
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fb4d 	bl	800282a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e048      	b.n	8002248 <HAL_TIM_OC_ConfigChannel+0xb0>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	d839      	bhi.n	8002238 <HAL_TIM_OC_ConfigChannel+0xa0>
 80021c4:	a201      	add	r2, pc, #4	@ (adr r2, 80021cc <HAL_TIM_OC_ConfigChannel+0x34>)
 80021c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ca:	bf00      	nop
 80021cc:	08002201 	.word	0x08002201
 80021d0:	08002239 	.word	0x08002239
 80021d4:	08002239 	.word	0x08002239
 80021d8:	08002239 	.word	0x08002239
 80021dc:	0800220f 	.word	0x0800220f
 80021e0:	08002239 	.word	0x08002239
 80021e4:	08002239 	.word	0x08002239
 80021e8:	08002239 	.word	0x08002239
 80021ec:	0800221d 	.word	0x0800221d
 80021f0:	08002239 	.word	0x08002239
 80021f4:	08002239 	.word	0x08002239
 80021f8:	08002239 	.word	0x08002239
 80021fc:	0800222b 	.word	0x0800222b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f93a 	bl	8002480 <TIM_OC1_SetConfig>
      break;
 800220c:	e017      	b.n	800223e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f9a3 	bl	8002560 <TIM_OC2_SetConfig>
      break;
 800221a:	e010      	b.n	800223e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fa12 	bl	800264c <TIM_OC3_SetConfig>
      break;
 8002228:	e009      	b.n	800223e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fa7f 	bl	8002734 <TIM_OC4_SetConfig>
      break;
 8002236:	e002      	b.n	800223e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	75fb      	strb	r3, [r7, #23]
      break;
 800223c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002246:	7dfb      	ldrb	r3, [r7, #23]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b0c      	cmp	r3, #12
 8002262:	d831      	bhi.n	80022c8 <HAL_TIM_ReadCapturedValue+0x78>
 8002264:	a201      	add	r2, pc, #4	@ (adr r2, 800226c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226a:	bf00      	nop
 800226c:	080022a1 	.word	0x080022a1
 8002270:	080022c9 	.word	0x080022c9
 8002274:	080022c9 	.word	0x080022c9
 8002278:	080022c9 	.word	0x080022c9
 800227c:	080022ab 	.word	0x080022ab
 8002280:	080022c9 	.word	0x080022c9
 8002284:	080022c9 	.word	0x080022c9
 8002288:	080022c9 	.word	0x080022c9
 800228c:	080022b5 	.word	0x080022b5
 8002290:	080022c9 	.word	0x080022c9
 8002294:	080022c9 	.word	0x080022c9
 8002298:	080022c9 	.word	0x080022c9
 800229c:	080022bf 	.word	0x080022bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a6:	60fb      	str	r3, [r7, #12]

      break;
 80022a8:	e00f      	b.n	80022ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b0:	60fb      	str	r3, [r7, #12]

      break;
 80022b2:	e00a      	b.n	80022ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ba:	60fb      	str	r3, [r7, #12]

      break;
 80022bc:	e005      	b.n	80022ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	60fb      	str	r3, [r7, #12]

      break;
 80022c6:	e000      	b.n	80022ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80022c8:	bf00      	nop
  }

  return tmpreg;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a46      	ldr	r2, [pc, #280]	@ (8002454 <TIM_Base_SetConfig+0x12c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002346:	d00f      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a43      	ldr	r2, [pc, #268]	@ (8002458 <TIM_Base_SetConfig+0x130>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00b      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a42      	ldr	r2, [pc, #264]	@ (800245c <TIM_Base_SetConfig+0x134>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a41      	ldr	r2, [pc, #260]	@ (8002460 <TIM_Base_SetConfig+0x138>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d003      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a40      	ldr	r2, [pc, #256]	@ (8002464 <TIM_Base_SetConfig+0x13c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d108      	bne.n	800237a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800236e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a35      	ldr	r2, [pc, #212]	@ (8002454 <TIM_Base_SetConfig+0x12c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d02b      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002388:	d027      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a32      	ldr	r2, [pc, #200]	@ (8002458 <TIM_Base_SetConfig+0x130>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d023      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a31      	ldr	r2, [pc, #196]	@ (800245c <TIM_Base_SetConfig+0x134>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01f      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a30      	ldr	r2, [pc, #192]	@ (8002460 <TIM_Base_SetConfig+0x138>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01b      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002464 <TIM_Base_SetConfig+0x13c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d017      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002468 <TIM_Base_SetConfig+0x140>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a2d      	ldr	r2, [pc, #180]	@ (800246c <TIM_Base_SetConfig+0x144>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00f      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002470 <TIM_Base_SetConfig+0x148>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00b      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002474 <TIM_Base_SetConfig+0x14c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002478 <TIM_Base_SetConfig+0x150>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a29      	ldr	r2, [pc, #164]	@ (800247c <TIM_Base_SetConfig+0x154>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d108      	bne.n	80023ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a10      	ldr	r2, [pc, #64]	@ (8002454 <TIM_Base_SetConfig+0x12c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d003      	beq.n	8002420 <TIM_Base_SetConfig+0xf8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a12      	ldr	r2, [pc, #72]	@ (8002464 <TIM_Base_SetConfig+0x13c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d103      	bne.n	8002428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f023 0201 	bic.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	611a      	str	r2, [r3, #16]
  }
}
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40010000 	.word	0x40010000
 8002458:	40000400 	.word	0x40000400
 800245c:	40000800 	.word	0x40000800
 8002460:	40000c00 	.word	0x40000c00
 8002464:	40010400 	.word	0x40010400
 8002468:	40014000 	.word	0x40014000
 800246c:	40014400 	.word	0x40014400
 8002470:	40014800 	.word	0x40014800
 8002474:	40001800 	.word	0x40001800
 8002478:	40001c00 	.word	0x40001c00
 800247c:	40002000 	.word	0x40002000

08002480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f023 0201 	bic.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 0303 	bic.w	r3, r3, #3
 80024b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f023 0302 	bic.w	r3, r3, #2
 80024c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a20      	ldr	r2, [pc, #128]	@ (8002558 <TIM_OC1_SetConfig+0xd8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d003      	beq.n	80024e4 <TIM_OC1_SetConfig+0x64>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a1f      	ldr	r2, [pc, #124]	@ (800255c <TIM_OC1_SetConfig+0xdc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d10c      	bne.n	80024fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f023 0308 	bic.w	r3, r3, #8
 80024ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a15      	ldr	r2, [pc, #84]	@ (8002558 <TIM_OC1_SetConfig+0xd8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d003      	beq.n	800250e <TIM_OC1_SetConfig+0x8e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <TIM_OC1_SetConfig+0xdc>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d111      	bne.n	8002532 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800251c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	621a      	str	r2, [r3, #32]
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40010000 	.word	0x40010000
 800255c:	40010400 	.word	0x40010400

08002560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f023 0210 	bic.w	r2, r3, #16
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800258e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f023 0320 	bic.w	r3, r3, #32
 80025aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a22      	ldr	r2, [pc, #136]	@ (8002644 <TIM_OC2_SetConfig+0xe4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d003      	beq.n	80025c8 <TIM_OC2_SetConfig+0x68>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a21      	ldr	r2, [pc, #132]	@ (8002648 <TIM_OC2_SetConfig+0xe8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d10d      	bne.n	80025e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a17      	ldr	r2, [pc, #92]	@ (8002644 <TIM_OC2_SetConfig+0xe4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d003      	beq.n	80025f4 <TIM_OC2_SetConfig+0x94>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a16      	ldr	r2, [pc, #88]	@ (8002648 <TIM_OC2_SetConfig+0xe8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d113      	bne.n	800261c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	621a      	str	r2, [r3, #32]
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000
 8002648:	40010400 	.word	0x40010400

0800264c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800267a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a21      	ldr	r2, [pc, #132]	@ (800272c <TIM_OC3_SetConfig+0xe0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d003      	beq.n	80026b2 <TIM_OC3_SetConfig+0x66>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a20      	ldr	r2, [pc, #128]	@ (8002730 <TIM_OC3_SetConfig+0xe4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d10d      	bne.n	80026ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a16      	ldr	r2, [pc, #88]	@ (800272c <TIM_OC3_SetConfig+0xe0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d003      	beq.n	80026de <TIM_OC3_SetConfig+0x92>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a15      	ldr	r2, [pc, #84]	@ (8002730 <TIM_OC3_SetConfig+0xe4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d113      	bne.n	8002706 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	621a      	str	r2, [r3, #32]
}
 8002720:	bf00      	nop
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	40010000 	.word	0x40010000
 8002730:	40010400 	.word	0x40010400

08002734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800276a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800277e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	031b      	lsls	r3, r3, #12
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a12      	ldr	r2, [pc, #72]	@ (80027d8 <TIM_OC4_SetConfig+0xa4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d003      	beq.n	800279c <TIM_OC4_SetConfig+0x68>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a11      	ldr	r2, [pc, #68]	@ (80027dc <TIM_OC4_SetConfig+0xa8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d109      	bne.n	80027b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	019b      	lsls	r3, r3, #6
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	621a      	str	r2, [r3, #32]
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40010000 	.word	0x40010000
 80027dc:	40010400 	.word	0x40010400

080027e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2201      	movs	r2, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a1a      	ldr	r2, [r3, #32]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	43db      	mvns	r3, r3
 8002802:	401a      	ands	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a1a      	ldr	r2, [r3, #32]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	431a      	orrs	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	621a      	str	r2, [r3, #32]
}
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e042      	b.n	80028ea <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d106      	bne.n	800287e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7fe f84b 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2224      	movs	r2, #36	@ 0x24
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002894:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f82c 	bl	80028f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f8:	b0c0      	sub	sp, #256	@ 0x100
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002910:	68d9      	ldr	r1, [r3, #12]
 8002912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	ea40 0301 	orr.w	r3, r0, r1
 800291c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800291e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	431a      	orrs	r2, r3
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	431a      	orrs	r2, r3
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800294c:	f021 010c 	bic.w	r1, r1, #12
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800295a:	430b      	orrs	r3, r1
 800295c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296e:	6999      	ldr	r1, [r3, #24]
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	ea40 0301 	orr.w	r3, r0, r1
 800297a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4b8f      	ldr	r3, [pc, #572]	@ (8002bc0 <UART_SetConfig+0x2cc>)
 8002984:	429a      	cmp	r2, r3
 8002986:	d005      	beq.n	8002994 <UART_SetConfig+0xa0>
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b8d      	ldr	r3, [pc, #564]	@ (8002bc4 <UART_SetConfig+0x2d0>)
 8002990:	429a      	cmp	r2, r3
 8002992:	d104      	bne.n	800299e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002994:	f7fe fcc8 	bl	8001328 <HAL_RCC_GetPCLK2Freq>
 8002998:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800299c:	e003      	b.n	80029a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800299e:	f7fe fcaf 	bl	8001300 <HAL_RCC_GetPCLK1Freq>
 80029a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029b0:	f040 810c 	bne.w	8002bcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029b8:	2200      	movs	r2, #0
 80029ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029c6:	4622      	mov	r2, r4
 80029c8:	462b      	mov	r3, r5
 80029ca:	1891      	adds	r1, r2, r2
 80029cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029ce:	415b      	adcs	r3, r3
 80029d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029d6:	4621      	mov	r1, r4
 80029d8:	eb12 0801 	adds.w	r8, r2, r1
 80029dc:	4629      	mov	r1, r5
 80029de:	eb43 0901 	adc.w	r9, r3, r1
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029f6:	4690      	mov	r8, r2
 80029f8:	4699      	mov	r9, r3
 80029fa:	4623      	mov	r3, r4
 80029fc:	eb18 0303 	adds.w	r3, r8, r3
 8002a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a04:	462b      	mov	r3, r5
 8002a06:	eb49 0303 	adc.w	r3, r9, r3
 8002a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a22:	460b      	mov	r3, r1
 8002a24:	18db      	adds	r3, r3, r3
 8002a26:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a28:	4613      	mov	r3, r2
 8002a2a:	eb42 0303 	adc.w	r3, r2, r3
 8002a2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a38:	f7fd fbe4 	bl	8000204 <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4b61      	ldr	r3, [pc, #388]	@ (8002bc8 <UART_SetConfig+0x2d4>)
 8002a42:	fba3 2302 	umull	r2, r3, r3, r2
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	011c      	lsls	r4, r3, #4
 8002a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a5c:	4642      	mov	r2, r8
 8002a5e:	464b      	mov	r3, r9
 8002a60:	1891      	adds	r1, r2, r2
 8002a62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a64:	415b      	adcs	r3, r3
 8002a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a6c:	4641      	mov	r1, r8
 8002a6e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a72:	4649      	mov	r1, r9
 8002a74:	eb43 0b01 	adc.w	fp, r3, r1
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a8c:	4692      	mov	sl, r2
 8002a8e:	469b      	mov	fp, r3
 8002a90:	4643      	mov	r3, r8
 8002a92:	eb1a 0303 	adds.w	r3, sl, r3
 8002a96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a9a:	464b      	mov	r3, r9
 8002a9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ab0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ab4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	18db      	adds	r3, r3, r3
 8002abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002abe:	4613      	mov	r3, r2
 8002ac0:	eb42 0303 	adc.w	r3, r2, r3
 8002ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ac6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002aca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002ace:	f7fd fb99 	bl	8000204 <__aeabi_uldivmod>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc8 <UART_SetConfig+0x2d4>)
 8002ada:	fba3 2301 	umull	r2, r3, r3, r1
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2264      	movs	r2, #100	@ 0x64
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	1acb      	subs	r3, r1, r3
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002aee:	4b36      	ldr	r3, [pc, #216]	@ (8002bc8 <UART_SetConfig+0x2d4>)
 8002af0:	fba3 2302 	umull	r2, r3, r3, r2
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002afc:	441c      	add	r4, r3
 8002afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b10:	4642      	mov	r2, r8
 8002b12:	464b      	mov	r3, r9
 8002b14:	1891      	adds	r1, r2, r2
 8002b16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b18:	415b      	adcs	r3, r3
 8002b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b20:	4641      	mov	r1, r8
 8002b22:	1851      	adds	r1, r2, r1
 8002b24:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b26:	4649      	mov	r1, r9
 8002b28:	414b      	adcs	r3, r1
 8002b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b38:	4659      	mov	r1, fp
 8002b3a:	00cb      	lsls	r3, r1, #3
 8002b3c:	4651      	mov	r1, sl
 8002b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b42:	4651      	mov	r1, sl
 8002b44:	00ca      	lsls	r2, r1, #3
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4642      	mov	r2, r8
 8002b4e:	189b      	adds	r3, r3, r2
 8002b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b54:	464b      	mov	r3, r9
 8002b56:	460a      	mov	r2, r1
 8002b58:	eb42 0303 	adc.w	r3, r2, r3
 8002b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b74:	460b      	mov	r3, r1
 8002b76:	18db      	adds	r3, r3, r3
 8002b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	eb42 0303 	adc.w	r3, r2, r3
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b8a:	f7fd fb3b 	bl	8000204 <__aeabi_uldivmod>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <UART_SetConfig+0x2d4>)
 8002b94:	fba3 1302 	umull	r1, r3, r3, r2
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	2164      	movs	r1, #100	@ 0x64
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	3332      	adds	r3, #50	@ 0x32
 8002ba6:	4a08      	ldr	r2, [pc, #32]	@ (8002bc8 <UART_SetConfig+0x2d4>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	f003 0207 	and.w	r2, r3, #7
 8002bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4422      	add	r2, r4
 8002bba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bbc:	e106      	b.n	8002dcc <UART_SetConfig+0x4d8>
 8002bbe:	bf00      	nop
 8002bc0:	40011000 	.word	0x40011000
 8002bc4:	40011400 	.word	0x40011400
 8002bc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002bde:	4642      	mov	r2, r8
 8002be0:	464b      	mov	r3, r9
 8002be2:	1891      	adds	r1, r2, r2
 8002be4:	6239      	str	r1, [r7, #32]
 8002be6:	415b      	adcs	r3, r3
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bee:	4641      	mov	r1, r8
 8002bf0:	1854      	adds	r4, r2, r1
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	eb43 0501 	adc.w	r5, r3, r1
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	00eb      	lsls	r3, r5, #3
 8002c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c06:	00e2      	lsls	r2, r4, #3
 8002c08:	4614      	mov	r4, r2
 8002c0a:	461d      	mov	r5, r3
 8002c0c:	4643      	mov	r3, r8
 8002c0e:	18e3      	adds	r3, r4, r3
 8002c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c14:	464b      	mov	r3, r9
 8002c16:	eb45 0303 	adc.w	r3, r5, r3
 8002c1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	008b      	lsls	r3, r1, #2
 8002c3e:	4621      	mov	r1, r4
 8002c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c44:	4621      	mov	r1, r4
 8002c46:	008a      	lsls	r2, r1, #2
 8002c48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c4c:	f7fd fada 	bl	8000204 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4b60      	ldr	r3, [pc, #384]	@ (8002dd8 <UART_SetConfig+0x4e4>)
 8002c56:	fba3 2302 	umull	r2, r3, r3, r2
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	011c      	lsls	r4, r3, #4
 8002c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c70:	4642      	mov	r2, r8
 8002c72:	464b      	mov	r3, r9
 8002c74:	1891      	adds	r1, r2, r2
 8002c76:	61b9      	str	r1, [r7, #24]
 8002c78:	415b      	adcs	r3, r3
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c80:	4641      	mov	r1, r8
 8002c82:	1851      	adds	r1, r2, r1
 8002c84:	6139      	str	r1, [r7, #16]
 8002c86:	4649      	mov	r1, r9
 8002c88:	414b      	adcs	r3, r1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c98:	4659      	mov	r1, fp
 8002c9a:	00cb      	lsls	r3, r1, #3
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	00ca      	lsls	r2, r1, #3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	4642      	mov	r2, r8
 8002cae:	189b      	adds	r3, r3, r2
 8002cb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cb4:	464b      	mov	r3, r9
 8002cb6:	460a      	mov	r2, r1
 8002cb8:	eb42 0303 	adc.w	r3, r2, r3
 8002cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002cd8:	4649      	mov	r1, r9
 8002cda:	008b      	lsls	r3, r1, #2
 8002cdc:	4641      	mov	r1, r8
 8002cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ce2:	4641      	mov	r1, r8
 8002ce4:	008a      	lsls	r2, r1, #2
 8002ce6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002cea:	f7fd fa8b 	bl	8000204 <__aeabi_uldivmod>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4b38      	ldr	r3, [pc, #224]	@ (8002dd8 <UART_SetConfig+0x4e4>)
 8002cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2264      	movs	r2, #100	@ 0x64
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	1acb      	subs	r3, r1, r3
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	3332      	adds	r3, #50	@ 0x32
 8002d08:	4a33      	ldr	r2, [pc, #204]	@ (8002dd8 <UART_SetConfig+0x4e4>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d14:	441c      	add	r4, r3
 8002d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d24:	4642      	mov	r2, r8
 8002d26:	464b      	mov	r3, r9
 8002d28:	1891      	adds	r1, r2, r2
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	415b      	adcs	r3, r3
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d34:	4641      	mov	r1, r8
 8002d36:	1851      	adds	r1, r2, r1
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	4649      	mov	r1, r9
 8002d3c:	414b      	adcs	r3, r1
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d4c:	4659      	mov	r1, fp
 8002d4e:	00cb      	lsls	r3, r1, #3
 8002d50:	4651      	mov	r1, sl
 8002d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d56:	4651      	mov	r1, sl
 8002d58:	00ca      	lsls	r2, r1, #3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4642      	mov	r2, r8
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d66:	464b      	mov	r3, r9
 8002d68:	460a      	mov	r2, r1
 8002d6a:	eb42 0303 	adc.w	r3, r2, r3
 8002d6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d88:	4649      	mov	r1, r9
 8002d8a:	008b      	lsls	r3, r1, #2
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d92:	4641      	mov	r1, r8
 8002d94:	008a      	lsls	r2, r1, #2
 8002d96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d9a:	f7fd fa33 	bl	8000204 <__aeabi_uldivmod>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd8 <UART_SetConfig+0x4e4>)
 8002da4:	fba3 1302 	umull	r1, r3, r3, r2
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	2164      	movs	r1, #100	@ 0x64
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	3332      	adds	r3, #50	@ 0x32
 8002db6:	4a08      	ldr	r2, [pc, #32]	@ (8002dd8 <UART_SetConfig+0x4e4>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	f003 020f 	and.w	r2, r3, #15
 8002dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4422      	add	r2, r4
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd8:	51eb851f 	.word	0x51eb851f

08002ddc <__libc_init_array>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	4d0d      	ldr	r5, [pc, #52]	@ (8002e14 <__libc_init_array+0x38>)
 8002de0:	4c0d      	ldr	r4, [pc, #52]	@ (8002e18 <__libc_init_array+0x3c>)
 8002de2:	1b64      	subs	r4, r4, r5
 8002de4:	10a4      	asrs	r4, r4, #2
 8002de6:	2600      	movs	r6, #0
 8002de8:	42a6      	cmp	r6, r4
 8002dea:	d109      	bne.n	8002e00 <__libc_init_array+0x24>
 8002dec:	4d0b      	ldr	r5, [pc, #44]	@ (8002e1c <__libc_init_array+0x40>)
 8002dee:	4c0c      	ldr	r4, [pc, #48]	@ (8002e20 <__libc_init_array+0x44>)
 8002df0:	f000 f818 	bl	8002e24 <_init>
 8002df4:	1b64      	subs	r4, r4, r5
 8002df6:	10a4      	asrs	r4, r4, #2
 8002df8:	2600      	movs	r6, #0
 8002dfa:	42a6      	cmp	r6, r4
 8002dfc:	d105      	bne.n	8002e0a <__libc_init_array+0x2e>
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}
 8002e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e04:	4798      	blx	r3
 8002e06:	3601      	adds	r6, #1
 8002e08:	e7ee      	b.n	8002de8 <__libc_init_array+0xc>
 8002e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0e:	4798      	blx	r3
 8002e10:	3601      	adds	r6, #1
 8002e12:	e7f2      	b.n	8002dfa <__libc_init_array+0x1e>
 8002e14:	08002e5c 	.word	0x08002e5c
 8002e18:	08002e5c 	.word	0x08002e5c
 8002e1c:	08002e5c 	.word	0x08002e5c
 8002e20:	08002e60 	.word	0x08002e60

08002e24 <_init>:
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e26:	bf00      	nop
 8002e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2a:	bc08      	pop	{r3}
 8002e2c:	469e      	mov	lr, r3
 8002e2e:	4770      	bx	lr

08002e30 <_fini>:
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e32:	bf00      	nop
 8002e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e36:	bc08      	pop	{r3}
 8002e38:	469e      	mov	lr, r3
 8002e3a:	4770      	bx	lr
