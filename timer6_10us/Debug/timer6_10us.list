
timer6_10us.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001af4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001cb8  08001cb8  00002cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cc8  08001cc8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001cc8  08001cc8  00002cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001cd0  08001cd0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cd0  08001cd0  00002cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001cd4  08001cd4  00002cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001cd8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08001ce4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08001ce4  00003088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b7d  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001373  00000000  00000000  0000abb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0000bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062a  00000000  00000000  0000c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001991  00000000  00000000  0000cd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009639  00000000  00000000  0000e6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf22a  00000000  00000000  00017d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6f56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002164  00000000  00000000  000e6f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000e9100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001ca0 	.word	0x08001ca0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001ca0 	.word	0x08001ca0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:

TIM_HandleTypeDef htimer6;
GPIO_InitTypeDef gpio;

int main (void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_Init();
 80004f8:	f000 f962 	bl	80007c0 <HAL_Init>
	SystemClockConfig(50);
 80004fc:	2032      	movs	r0, #50	@ 0x32
 80004fe:	f000 f80b 	bl	8000518 <SystemClockConfig>
	timer6_init();
 8000502:	f000 f899 	bl	8000638 <timer6_init>
	gpio_init();
 8000506:	f000 f8b1 	bl	800066c <gpio_init>

	HAL_TIM_Base_Start_IT(&htimer6);
 800050a:	4802      	ldr	r0, [pc, #8]	@ (8000514 <main+0x20>)
 800050c:	f001 fa88 	bl	8001a20 <HAL_TIM_Base_Start_IT>


	while(1);
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <main+0x1c>
 8000514:	20000028 	.word	0x20000028

08000518 <SystemClockConfig>:

	return 0;
}

void SystemClockConfig(uint8_t clock_freq)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	@ 0x58
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000522:	2302      	movs	r3, #2
 8000524:	623b      	str	r3, [r7, #32]
	Osc_Init.HSIState = RCC_HSI_ON;
 8000526:	2301      	movs	r3, #1
 8000528:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Osc_Init.HSICalibrationValue = 16;
 800052a:	2310      	movs	r3, #16
 800052c:	633b      	str	r3, [r7, #48]	@ 0x30
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	63bb      	str	r3, [r7, #56]	@ 0x38
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000532:	2300      	movs	r3, #0
 8000534:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch(clock_freq) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b78      	cmp	r3, #120	@ 0x78
 800053a:	d032      	beq.n	80005a2 <SystemClockConfig+0x8a>
 800053c:	2b78      	cmp	r3, #120	@ 0x78
 800053e:	dc71      	bgt.n	8000624 <SystemClockConfig+0x10c>
 8000540:	2b32      	cmp	r3, #50	@ 0x32
 8000542:	d002      	beq.n	800054a <SystemClockConfig+0x32>
 8000544:	2b54      	cmp	r3, #84	@ 0x54
 8000546:	d016      	beq.n	8000576 <SystemClockConfig+0x5e>
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    break;

    default:
    return ;
 8000548:	e06c      	b.n	8000624 <SystemClockConfig+0x10c>
    Osc_Init.PLL.PLLM = 8;
 800054a:	2308      	movs	r3, #8
 800054c:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLN = 50;
 800054e:	2332      	movs	r3, #50	@ 0x32
 8000550:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLQ = 2;
 8000556:	2302      	movs	r3, #2
 8000558:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Osc_Init.PLL.PLLR = 2;
 800055a:	2302      	movs	r3, #2
 800055c:	653b      	str	r3, [r7, #80]	@ 0x50
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800055e:	230f      	movs	r3, #15
 8000560:	60fb      	str	r3, [r7, #12]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	2302      	movs	r3, #2
 8000564:	613b      	str	r3, [r7, #16]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800056a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800056e:	61bb      	str	r3, [r7, #24]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
    break;
 8000574:	e02c      	b.n	80005d0 <SystemClockConfig+0xb8>
    Osc_Init.PLL.PLLM = 8;
 8000576:	2308      	movs	r3, #8
 8000578:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLN = 84;
 800057a:	2354      	movs	r3, #84	@ 0x54
 800057c:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLQ = 2;
 8000582:	2302      	movs	r3, #2
 8000584:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Osc_Init.PLL.PLLR = 2;
 8000586:	2302      	movs	r3, #2
 8000588:	653b      	str	r3, [r7, #80]	@ 0x50
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800058a:	230f      	movs	r3, #15
 800058c:	60fb      	str	r3, [r7, #12]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2302      	movs	r3, #2
 8000590:	613b      	str	r3, [r7, #16]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800059a:	61bb      	str	r3, [r7, #24]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
    break;
 80005a0:	e016      	b.n	80005d0 <SystemClockConfig+0xb8>
    Osc_Init.PLL.PLLM = 8;
 80005a2:	2308      	movs	r3, #8
 80005a4:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLN = 120;
 80005a6:	2378      	movs	r3, #120	@ 0x78
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLQ = 2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Osc_Init.PLL.PLLR = 2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	653b      	str	r3, [r7, #80]	@ 0x50
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80005b6:	230f      	movs	r3, #15
 80005b8:	60fb      	str	r3, [r7, #12]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2302      	movs	r3, #2
 80005bc:	613b      	str	r3, [r7, #16]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005c6:	61bb      	str	r3, [r7, #24]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005cc:	61fb      	str	r3, [r7, #28]
    break;
 80005ce:	bf00      	nop
	}

	if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 ff35 	bl	8001444 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClockConfig+0xcc>
	{
	  Error_handler();
 80005e0:	f000 f826 	bl	8000630 <Error_handler>
	}

	if (HAL_RCC_ClockConfig(&Clock_Init, FLASH_LATENCY_2) != HAL_OK)
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2102      	movs	r1, #2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fc08 	bl	8000e00 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClockConfig+0xe2>
	{
		Error_handler();
 80005f6:	f000 f81b 	bl	8000630 <Error_handler>
	}

	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 80005fa:	f000 fce7 	bl	8000fcc <HAL_RCC_GetHCLKFreq>
 80005fe:	6578      	str	r0, [r7, #84]	@ 0x54
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000602:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <SystemClockConfig+0x114>)
 8000604:	fba2 2303 	umull	r2, r3, r2, r3
 8000608:	099b      	lsrs	r3, r3, #6
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fa3b 	bl	8000a86 <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000610:	2004      	movs	r0, #4
 8000612:	f000 fa45 	bl	8000aa0 <HAL_SYSTICK_CLKSourceConfig>

	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	f04f 30ff 	mov.w	r0, #4294967295
 800061e:	f000 fa08 	bl	8000a32 <HAL_NVIC_SetPriority>
 8000622:	e000      	b.n	8000626 <SystemClockConfig+0x10e>
    return ;
 8000624:	bf00      	nop
}
 8000626:	3758      	adds	r7, #88	@ 0x58
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	10624dd3 	.word	0x10624dd3

08000630 <Error_handler>:

void Error_handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
	while(1);
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <Error_handler+0x4>

08000638 <timer6_init>:
}

void timer6_init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <timer6_init+0x2c>)
 800063e:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <timer6_init+0x30>)
 8000640:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 9;
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <timer6_init+0x2c>)
 8000644:	2209      	movs	r2, #9
 8000646:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 50-1;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <timer6_init+0x2c>)
 800064a:	2231      	movs	r2, #49	@ 0x31
 800064c:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htimer6)!= HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <timer6_init+0x2c>)
 8000650:	f001 f996 	bl	8001980 <HAL_TIM_Base_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <timer6_init+0x26>
	{
		Error_handler();
 800065a:	f7ff ffe9 	bl	8000630 <Error_handler>
	}
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000028 	.word	0x20000028
 8000668:	40001000 	.word	0x40001000

0800066c <gpio_init>:

void gpio_init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <gpio_init+0x4c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a0f      	ldr	r2, [pc, #60]	@ (80006b8 <gpio_init+0x4c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <gpio_init+0x4c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
	gpio.Pin = GPIO_PIN_5;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <gpio_init+0x50>)
 8000690:	2220      	movs	r2, #32
 8000692:	601a      	str	r2, [r3, #0]
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <gpio_init+0x50>)
 8000696:	2201      	movs	r2, #1
 8000698:	605a      	str	r2, [r3, #4]
	gpio.Pull = GPIO_NOPULL;
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <gpio_init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
	gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <gpio_init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &gpio);
 80006a6:	4905      	ldr	r1, [pc, #20]	@ (80006bc <gpio_init+0x50>)
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <gpio_init+0x54>)
 80006aa:	f000 fa15 	bl	8000ad8 <HAL_GPIO_Init>

}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	20000070 	.word	0x20000070
 80006c0:	40020000 	.word	0x40020000

080006c4 <HAL_MspInit>:
 */

#include "mainb.h"

void HAL_MspInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f000 f9a7 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

	SCB->SHCSR |= 0x7 << 16;
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <HAL_MspInit+0x40>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000704 <HAL_MspInit+0x40>)
 80006d4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	f06f 000a 	mvn.w	r0, #10
 80006e2:	f000 f9a6 	bl	8000a32 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	f06f 0009 	mvn.w	r0, #9
 80006ee:	f000 f9a0 	bl	8000a32 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	f06f 000b 	mvn.w	r0, #11
 80006fa:	f000 f99a 	bl	8000a32 <HAL_NVIC_SetPriority>


}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <HAL_TIM_Base_MspInit+0x3c>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a0a      	ldr	r2, [pc, #40]	@ (8000744 <HAL_TIM_Base_MspInit+0x3c>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <HAL_TIM_Base_MspInit+0x3c>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f003 0310 	and.w	r3, r3, #16
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]

	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800072c:	2036      	movs	r0, #54	@ 0x36
 800072e:	f000 f99c 	bl	8000a6a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	210f      	movs	r1, #15
 8000736:	2036      	movs	r0, #54	@ 0x36
 8000738:	f000 f97b 	bl	8000a32 <HAL_NVIC_SetPriority>

}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800

08000748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <SystemInit+0x20>)
 800074e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000752:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <SystemInit+0x20>)
 8000754:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000758:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800076c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000770:	f7ff ffea 	bl	8000748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000774:	480c      	ldr	r0, [pc, #48]	@ (80007a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000776:	490d      	ldr	r1, [pc, #52]	@ (80007ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000778:	4a0d      	ldr	r2, [pc, #52]	@ (80007b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0a      	ldr	r2, [pc, #40]	@ (80007b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800078c:	4c0a      	ldr	r4, [pc, #40]	@ (80007b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800079a:	f001 fa5d 	bl	8001c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800079e:	f7ff fea9 	bl	80004f4 <main>
  bx  lr    
 80007a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007b0:	08001cd8 	.word	0x08001cd8
  ldr r2, =_sbss
 80007b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007b8:	20000088 	.word	0x20000088

080007bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <HAL_Init+0x40>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000800 <HAL_Init+0x40>)
 80007ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <HAL_Init+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <HAL_Init+0x40>)
 80007d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <HAL_Init+0x40>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	@ (8000800 <HAL_Init+0x40>)
 80007e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f917 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 f808 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff ff66 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023c00 	.word	0x40023c00

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_InitTick+0x54>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <HAL_InitTick+0x58>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f92f 	bl	8000a86 <HAL_SYSTICK_Config>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d80a      	bhi.n	800084e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f000 f8f7 	bl	8000a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000844:	4a06      	ldr	r2, [pc, #24]	@ (8000860 <HAL_InitTick+0x5c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	20000008 	.word	0x20000008
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <HAL_GetTick+0x14>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000084 	.word	0x20000084

0800087c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ae:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	60d3      	str	r3, [r2, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c8:	4b04      	ldr	r3, [pc, #16]	@ (80008dc <__NVIC_GetPriorityGrouping+0x18>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	f003 0307 	and.w	r3, r3, #7
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	db0b      	blt.n	800090a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	f003 021f 	and.w	r2, r3, #31
 80008f8:	4907      	ldr	r1, [pc, #28]	@ (8000918 <__NVIC_EnableIRQ+0x38>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	095b      	lsrs	r3, r3, #5
 8000900:	2001      	movs	r0, #1
 8000902:	fa00 f202 	lsl.w	r2, r0, r2
 8000906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000e100 	.word	0xe000e100

0800091c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	db0a      	blt.n	8000946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	b2da      	uxtb	r2, r3
 8000934:	490c      	ldr	r1, [pc, #48]	@ (8000968 <__NVIC_SetPriority+0x4c>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	0112      	lsls	r2, r2, #4
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	440b      	add	r3, r1
 8000940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000944:	e00a      	b.n	800095c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4908      	ldr	r1, [pc, #32]	@ (800096c <__NVIC_SetPriority+0x50>)
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	3b04      	subs	r3, #4
 8000954:	0112      	lsls	r2, r2, #4
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	440b      	add	r3, r1
 800095a:	761a      	strb	r2, [r3, #24]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	@ 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f1c3 0307 	rsb	r3, r3, #7
 800098a:	2b04      	cmp	r3, #4
 800098c:	bf28      	it	cs
 800098e:	2304      	movcs	r3, #4
 8000990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3304      	adds	r3, #4
 8000996:	2b06      	cmp	r3, #6
 8000998:	d902      	bls.n	80009a0 <NVIC_EncodePriority+0x30>
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3b03      	subs	r3, #3
 800099e:	e000      	b.n	80009a2 <NVIC_EncodePriority+0x32>
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43da      	mvns	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	401a      	ands	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b8:	f04f 31ff 	mov.w	r1, #4294967295
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	43d9      	mvns	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	4313      	orrs	r3, r2
         );
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3724      	adds	r7, #36	@ 0x24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009e8:	d301      	bcc.n	80009ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00f      	b.n	8000a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <SysTick_Config+0x40>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f6:	210f      	movs	r1, #15
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f7ff ff8e 	bl	800091c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <SysTick_Config+0x40>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a06:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <SysTick_Config+0x40>)
 8000a08:	2207      	movs	r2, #7
 8000a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff29 	bl	800087c <__NVIC_SetPriorityGrouping>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a44:	f7ff ff3e 	bl	80008c4 <__NVIC_GetPriorityGrouping>
 8000a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff ff8e 	bl	8000970 <NVIC_EncodePriority>
 8000a54:	4602      	mov	r2, r0
 8000a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff5d 	bl	800091c <__NVIC_SetPriority>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff31 	bl	80008e0 <__NVIC_EnableIRQ>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffa2 	bl	80009d8 <SysTick_Config>
 8000a94:	4603      	mov	r3, r0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	d106      	bne.n	8000abc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a08      	ldr	r2, [pc, #32]	@ (8000ad4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000aba:	e005      	b.n	8000ac8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ac2:	f023 0304 	bic.w	r3, r3, #4
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	@ 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
 8000af2:	e165      	b.n	8000dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000af4:	2201      	movs	r2, #1
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	f040 8154 	bne.w	8000dba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d005      	beq.n	8000b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d130      	bne.n	8000b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	2203      	movs	r2, #3
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	68da      	ldr	r2, [r3, #12]
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b60:	2201      	movs	r2, #1
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	091b      	lsrs	r3, r3, #4
 8000b76:	f003 0201 	and.w	r2, r3, #1
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d017      	beq.n	8000bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d123      	bne.n	8000c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	08da      	lsrs	r2, r3, #3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3208      	adds	r2, #8
 8000bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	f003 0307 	and.w	r3, r3, #7
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	220f      	movs	r2, #15
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	691a      	ldr	r2, [r3, #16]
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	08da      	lsrs	r2, r3, #3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3208      	adds	r2, #8
 8000c16:	69b9      	ldr	r1, [r7, #24]
 8000c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2203      	movs	r2, #3
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0203 	and.w	r2, r3, #3
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f000 80ae 	beq.w	8000dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b5d      	ldr	r3, [pc, #372]	@ (8000dd8 <HAL_GPIO_Init+0x300>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a5c      	ldr	r2, [pc, #368]	@ (8000dd8 <HAL_GPIO_Init+0x300>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd8 <HAL_GPIO_Init+0x300>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c7a:	4a58      	ldr	r2, [pc, #352]	@ (8000ddc <HAL_GPIO_Init+0x304>)
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	3302      	adds	r3, #2
 8000c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	220f      	movs	r2, #15
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8000de0 <HAL_GPIO_Init+0x308>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d025      	beq.n	8000cf2 <HAL_GPIO_Init+0x21a>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a4e      	ldr	r2, [pc, #312]	@ (8000de4 <HAL_GPIO_Init+0x30c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d01f      	beq.n	8000cee <HAL_GPIO_Init+0x216>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a4d      	ldr	r2, [pc, #308]	@ (8000de8 <HAL_GPIO_Init+0x310>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d019      	beq.n	8000cea <HAL_GPIO_Init+0x212>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8000dec <HAL_GPIO_Init+0x314>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d013      	beq.n	8000ce6 <HAL_GPIO_Init+0x20e>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8000df0 <HAL_GPIO_Init+0x318>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d00d      	beq.n	8000ce2 <HAL_GPIO_Init+0x20a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8000df4 <HAL_GPIO_Init+0x31c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d007      	beq.n	8000cde <HAL_GPIO_Init+0x206>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a49      	ldr	r2, [pc, #292]	@ (8000df8 <HAL_GPIO_Init+0x320>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d101      	bne.n	8000cda <HAL_GPIO_Init+0x202>
 8000cd6:	2306      	movs	r3, #6
 8000cd8:	e00c      	b.n	8000cf4 <HAL_GPIO_Init+0x21c>
 8000cda:	2307      	movs	r3, #7
 8000cdc:	e00a      	b.n	8000cf4 <HAL_GPIO_Init+0x21c>
 8000cde:	2305      	movs	r3, #5
 8000ce0:	e008      	b.n	8000cf4 <HAL_GPIO_Init+0x21c>
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	e006      	b.n	8000cf4 <HAL_GPIO_Init+0x21c>
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e004      	b.n	8000cf4 <HAL_GPIO_Init+0x21c>
 8000cea:	2302      	movs	r3, #2
 8000cec:	e002      	b.n	8000cf4 <HAL_GPIO_Init+0x21c>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <HAL_GPIO_Init+0x21c>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	69fa      	ldr	r2, [r7, #28]
 8000cf6:	f002 0203 	and.w	r2, r2, #3
 8000cfa:	0092      	lsls	r2, r2, #2
 8000cfc:	4093      	lsls	r3, r2
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d04:	4935      	ldr	r1, [pc, #212]	@ (8000ddc <HAL_GPIO_Init+0x304>)
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	089b      	lsrs	r3, r3, #2
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d12:	4b3a      	ldr	r3, [pc, #232]	@ (8000dfc <HAL_GPIO_Init+0x324>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d36:	4a31      	ldr	r2, [pc, #196]	@ (8000dfc <HAL_GPIO_Init+0x324>)
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dfc <HAL_GPIO_Init+0x324>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d60:	4a26      	ldr	r2, [pc, #152]	@ (8000dfc <HAL_GPIO_Init+0x324>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d66:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <HAL_GPIO_Init+0x324>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dfc <HAL_GPIO_Init+0x324>)
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <HAL_GPIO_Init+0x324>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000db4:	4a11      	ldr	r2, [pc, #68]	@ (8000dfc <HAL_GPIO_Init+0x324>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	61fb      	str	r3, [r7, #28]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	2b0f      	cmp	r3, #15
 8000dc4:	f67f ae96 	bls.w	8000af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3724      	adds	r7, #36	@ 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40013800 	.word	0x40013800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40020400 	.word	0x40020400
 8000de8:	40020800 	.word	0x40020800
 8000dec:	40020c00 	.word	0x40020c00
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40021400 	.word	0x40021400
 8000df8:	40021800 	.word	0x40021800
 8000dfc:	40013c00 	.word	0x40013c00

08000e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e0cc      	b.n	8000fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e14:	4b68      	ldr	r3, [pc, #416]	@ (8000fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d90c      	bls.n	8000e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e22:	4b65      	ldr	r3, [pc, #404]	@ (8000fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e2a:	4b63      	ldr	r3, [pc, #396]	@ (8000fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d001      	beq.n	8000e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e0b8      	b.n	8000fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d020      	beq.n	8000e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d005      	beq.n	8000e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e54:	4b59      	ldr	r3, [pc, #356]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4a58      	ldr	r2, [pc, #352]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000e5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000e5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d005      	beq.n	8000e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e6c:	4b53      	ldr	r3, [pc, #332]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	4a52      	ldr	r2, [pc, #328]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000e72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e78:	4b50      	ldr	r3, [pc, #320]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	494d      	ldr	r1, [pc, #308]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d044      	beq.n	8000f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d107      	bne.n	8000eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	4b47      	ldr	r3, [pc, #284]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d119      	bne.n	8000ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e07f      	b.n	8000fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d003      	beq.n	8000ebe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d107      	bne.n	8000ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d109      	bne.n	8000ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e06f      	b.n	8000fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ece:	4b3b      	ldr	r3, [pc, #236]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e067      	b.n	8000fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ede:	4b37      	ldr	r3, [pc, #220]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f023 0203 	bic.w	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4934      	ldr	r1, [pc, #208]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000eec:	4313      	orrs	r3, r2
 8000eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ef0:	f7ff fcb8 	bl	8000864 <HAL_GetTick>
 8000ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ef6:	e00a      	b.n	8000f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef8:	f7ff fcb4 	bl	8000864 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e04f      	b.n	8000fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 020c 	and.w	r2, r3, #12
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d1eb      	bne.n	8000ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f20:	4b25      	ldr	r3, [pc, #148]	@ (8000fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 030f 	and.w	r3, r3, #15
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d20c      	bcs.n	8000f48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f2e:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d001      	beq.n	8000f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e032      	b.n	8000fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d008      	beq.n	8000f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f54:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	4916      	ldr	r1, [pc, #88]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d009      	beq.n	8000f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	490e      	ldr	r1, [pc, #56]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f86:	f000 f82d 	bl	8000fe4 <HAL_RCC_GetSysClockFreq>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_RCC_ClockConfig+0x1bc>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	490a      	ldr	r1, [pc, #40]	@ (8000fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f98:	5ccb      	ldrb	r3, [r1, r3]
 8000f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9e:	4a09      	ldr	r2, [pc, #36]	@ (8000fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8000fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fc2c 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	08001cb8 	.word	0x08001cb8
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	@ (8000fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fe8:	b0ae      	sub	sp, #184	@ 0xb8
 8000fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800100a:	4bcb      	ldr	r3, [pc, #812]	@ (8001338 <HAL_RCC_GetSysClockFreq+0x354>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b0c      	cmp	r3, #12
 8001014:	f200 8206 	bhi.w	8001424 <HAL_RCC_GetSysClockFreq+0x440>
 8001018:	a201      	add	r2, pc, #4	@ (adr r2, 8001020 <HAL_RCC_GetSysClockFreq+0x3c>)
 800101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101e:	bf00      	nop
 8001020:	08001055 	.word	0x08001055
 8001024:	08001425 	.word	0x08001425
 8001028:	08001425 	.word	0x08001425
 800102c:	08001425 	.word	0x08001425
 8001030:	0800105d 	.word	0x0800105d
 8001034:	08001425 	.word	0x08001425
 8001038:	08001425 	.word	0x08001425
 800103c:	08001425 	.word	0x08001425
 8001040:	08001065 	.word	0x08001065
 8001044:	08001425 	.word	0x08001425
 8001048:	08001425 	.word	0x08001425
 800104c:	08001425 	.word	0x08001425
 8001050:	08001255 	.word	0x08001255
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001054:	4bb9      	ldr	r3, [pc, #740]	@ (800133c <HAL_RCC_GetSysClockFreq+0x358>)
 8001056:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800105a:	e1e7      	b.n	800142c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800105c:	4bb8      	ldr	r3, [pc, #736]	@ (8001340 <HAL_RCC_GetSysClockFreq+0x35c>)
 800105e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001062:	e1e3      	b.n	800142c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001064:	4bb4      	ldr	r3, [pc, #720]	@ (8001338 <HAL_RCC_GetSysClockFreq+0x354>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800106c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001070:	4bb1      	ldr	r3, [pc, #708]	@ (8001338 <HAL_RCC_GetSysClockFreq+0x354>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d071      	beq.n	8001160 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800107c:	4bae      	ldr	r3, [pc, #696]	@ (8001338 <HAL_RCC_GetSysClockFreq+0x354>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	099b      	lsrs	r3, r3, #6
 8001082:	2200      	movs	r2, #0
 8001084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001088:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800108c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001094:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800109e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80010a2:	4622      	mov	r2, r4
 80010a4:	462b      	mov	r3, r5
 80010a6:	f04f 0000 	mov.w	r0, #0
 80010aa:	f04f 0100 	mov.w	r1, #0
 80010ae:	0159      	lsls	r1, r3, #5
 80010b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80010b4:	0150      	lsls	r0, r2, #5
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4621      	mov	r1, r4
 80010bc:	1a51      	subs	r1, r2, r1
 80010be:	6439      	str	r1, [r7, #64]	@ 0x40
 80010c0:	4629      	mov	r1, r5
 80010c2:	eb63 0301 	sbc.w	r3, r3, r1
 80010c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80010d4:	4649      	mov	r1, r9
 80010d6:	018b      	lsls	r3, r1, #6
 80010d8:	4641      	mov	r1, r8
 80010da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80010de:	4641      	mov	r1, r8
 80010e0:	018a      	lsls	r2, r1, #6
 80010e2:	4641      	mov	r1, r8
 80010e4:	1a51      	subs	r1, r2, r1
 80010e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80010e8:	4649      	mov	r1, r9
 80010ea:	eb63 0301 	sbc.w	r3, r3, r1
 80010ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80010fc:	4649      	mov	r1, r9
 80010fe:	00cb      	lsls	r3, r1, #3
 8001100:	4641      	mov	r1, r8
 8001102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001106:	4641      	mov	r1, r8
 8001108:	00ca      	lsls	r2, r1, #3
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	4603      	mov	r3, r0
 8001110:	4622      	mov	r2, r4
 8001112:	189b      	adds	r3, r3, r2
 8001114:	633b      	str	r3, [r7, #48]	@ 0x30
 8001116:	462b      	mov	r3, r5
 8001118:	460a      	mov	r2, r1
 800111a:	eb42 0303 	adc.w	r3, r2, r3
 800111e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800112c:	4629      	mov	r1, r5
 800112e:	024b      	lsls	r3, r1, #9
 8001130:	4621      	mov	r1, r4
 8001132:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001136:	4621      	mov	r1, r4
 8001138:	024a      	lsls	r2, r1, #9
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001142:	2200      	movs	r2, #0
 8001144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001148:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800114c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001150:	f7ff f858 	bl	8000204 <__aeabi_uldivmod>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4613      	mov	r3, r2
 800115a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800115e:	e067      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001160:	4b75      	ldr	r3, [pc, #468]	@ (8001338 <HAL_RCC_GetSysClockFreq+0x354>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	099b      	lsrs	r3, r3, #6
 8001166:	2200      	movs	r2, #0
 8001168:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800116c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001170:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001178:	67bb      	str	r3, [r7, #120]	@ 0x78
 800117a:	2300      	movs	r3, #0
 800117c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800117e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001182:	4622      	mov	r2, r4
 8001184:	462b      	mov	r3, r5
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	f04f 0100 	mov.w	r1, #0
 800118e:	0159      	lsls	r1, r3, #5
 8001190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001194:	0150      	lsls	r0, r2, #5
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4621      	mov	r1, r4
 800119c:	1a51      	subs	r1, r2, r1
 800119e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80011a0:	4629      	mov	r1, r5
 80011a2:	eb63 0301 	sbc.w	r3, r3, r1
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80011b4:	4649      	mov	r1, r9
 80011b6:	018b      	lsls	r3, r1, #6
 80011b8:	4641      	mov	r1, r8
 80011ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011be:	4641      	mov	r1, r8
 80011c0:	018a      	lsls	r2, r1, #6
 80011c2:	4641      	mov	r1, r8
 80011c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80011c8:	4649      	mov	r1, r9
 80011ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80011da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80011de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80011e2:	4692      	mov	sl, r2
 80011e4:	469b      	mov	fp, r3
 80011e6:	4623      	mov	r3, r4
 80011e8:	eb1a 0303 	adds.w	r3, sl, r3
 80011ec:	623b      	str	r3, [r7, #32]
 80011ee:	462b      	mov	r3, r5
 80011f0:	eb4b 0303 	adc.w	r3, fp, r3
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001202:	4629      	mov	r1, r5
 8001204:	028b      	lsls	r3, r1, #10
 8001206:	4621      	mov	r1, r4
 8001208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800120c:	4621      	mov	r1, r4
 800120e:	028a      	lsls	r2, r1, #10
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001218:	2200      	movs	r2, #0
 800121a:	673b      	str	r3, [r7, #112]	@ 0x70
 800121c:	677a      	str	r2, [r7, #116]	@ 0x74
 800121e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001222:	f7fe ffef 	bl	8000204 <__aeabi_uldivmod>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4613      	mov	r3, r2
 800122c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001230:	4b41      	ldr	r3, [pc, #260]	@ (8001338 <HAL_RCC_GetSysClockFreq+0x354>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	0c1b      	lsrs	r3, r3, #16
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	3301      	adds	r3, #1
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001246:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001252:	e0eb      	b.n	800142c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001254:	4b38      	ldr	r3, [pc, #224]	@ (8001338 <HAL_RCC_GetSysClockFreq+0x354>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800125c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001260:	4b35      	ldr	r3, [pc, #212]	@ (8001338 <HAL_RCC_GetSysClockFreq+0x354>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d06b      	beq.n	8001344 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800126c:	4b32      	ldr	r3, [pc, #200]	@ (8001338 <HAL_RCC_GetSysClockFreq+0x354>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	099b      	lsrs	r3, r3, #6
 8001272:	2200      	movs	r2, #0
 8001274:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001276:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001278:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800127a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800127e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001280:	2300      	movs	r3, #0
 8001282:	667b      	str	r3, [r7, #100]	@ 0x64
 8001284:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001288:	4622      	mov	r2, r4
 800128a:	462b      	mov	r3, r5
 800128c:	f04f 0000 	mov.w	r0, #0
 8001290:	f04f 0100 	mov.w	r1, #0
 8001294:	0159      	lsls	r1, r3, #5
 8001296:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800129a:	0150      	lsls	r0, r2, #5
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4621      	mov	r1, r4
 80012a2:	1a51      	subs	r1, r2, r1
 80012a4:	61b9      	str	r1, [r7, #24]
 80012a6:	4629      	mov	r1, r5
 80012a8:	eb63 0301 	sbc.w	r3, r3, r1
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80012ba:	4659      	mov	r1, fp
 80012bc:	018b      	lsls	r3, r1, #6
 80012be:	4651      	mov	r1, sl
 80012c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012c4:	4651      	mov	r1, sl
 80012c6:	018a      	lsls	r2, r1, #6
 80012c8:	4651      	mov	r1, sl
 80012ca:	ebb2 0801 	subs.w	r8, r2, r1
 80012ce:	4659      	mov	r1, fp
 80012d0:	eb63 0901 	sbc.w	r9, r3, r1
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012e8:	4690      	mov	r8, r2
 80012ea:	4699      	mov	r9, r3
 80012ec:	4623      	mov	r3, r4
 80012ee:	eb18 0303 	adds.w	r3, r8, r3
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	462b      	mov	r3, r5
 80012f6:	eb49 0303 	adc.w	r3, r9, r3
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001308:	4629      	mov	r1, r5
 800130a:	024b      	lsls	r3, r1, #9
 800130c:	4621      	mov	r1, r4
 800130e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001312:	4621      	mov	r1, r4
 8001314:	024a      	lsls	r2, r1, #9
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800131e:	2200      	movs	r2, #0
 8001320:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001322:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001324:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001328:	f7fe ff6c 	bl	8000204 <__aeabi_uldivmod>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4613      	mov	r3, r2
 8001332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001336:	e065      	b.n	8001404 <HAL_RCC_GetSysClockFreq+0x420>
 8001338:	40023800 	.word	0x40023800
 800133c:	00f42400 	.word	0x00f42400
 8001340:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001344:	4b3d      	ldr	r3, [pc, #244]	@ (800143c <HAL_RCC_GetSysClockFreq+0x458>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	099b      	lsrs	r3, r3, #6
 800134a:	2200      	movs	r2, #0
 800134c:	4618      	mov	r0, r3
 800134e:	4611      	mov	r1, r2
 8001350:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001354:	653b      	str	r3, [r7, #80]	@ 0x50
 8001356:	2300      	movs	r3, #0
 8001358:	657b      	str	r3, [r7, #84]	@ 0x54
 800135a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800135e:	4642      	mov	r2, r8
 8001360:	464b      	mov	r3, r9
 8001362:	f04f 0000 	mov.w	r0, #0
 8001366:	f04f 0100 	mov.w	r1, #0
 800136a:	0159      	lsls	r1, r3, #5
 800136c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001370:	0150      	lsls	r0, r2, #5
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4641      	mov	r1, r8
 8001378:	1a51      	subs	r1, r2, r1
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	4649      	mov	r1, r9
 800137e:	eb63 0301 	sbc.w	r3, r3, r1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001390:	4659      	mov	r1, fp
 8001392:	018b      	lsls	r3, r1, #6
 8001394:	4651      	mov	r1, sl
 8001396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800139a:	4651      	mov	r1, sl
 800139c:	018a      	lsls	r2, r1, #6
 800139e:	4651      	mov	r1, sl
 80013a0:	1a54      	subs	r4, r2, r1
 80013a2:	4659      	mov	r1, fp
 80013a4:	eb63 0501 	sbc.w	r5, r3, r1
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	00eb      	lsls	r3, r5, #3
 80013b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013b6:	00e2      	lsls	r2, r4, #3
 80013b8:	4614      	mov	r4, r2
 80013ba:	461d      	mov	r5, r3
 80013bc:	4643      	mov	r3, r8
 80013be:	18e3      	adds	r3, r4, r3
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	464b      	mov	r3, r9
 80013c4:	eb45 0303 	adc.w	r3, r5, r3
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013d6:	4629      	mov	r1, r5
 80013d8:	028b      	lsls	r3, r1, #10
 80013da:	4621      	mov	r1, r4
 80013dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013e0:	4621      	mov	r1, r4
 80013e2:	028a      	lsls	r2, r1, #10
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013ec:	2200      	movs	r2, #0
 80013ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80013f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80013f6:	f7fe ff05 	bl	8000204 <__aeabi_uldivmod>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4613      	mov	r3, r2
 8001400:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <HAL_RCC_GetSysClockFreq+0x458>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	0f1b      	lsrs	r3, r3, #28
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001416:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001422:	e003      	b.n	800142c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800142a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800142c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001430:	4618      	mov	r0, r3
 8001432:	37b8      	adds	r7, #184	@ 0xb8
 8001434:	46bd      	mov	sp, r7
 8001436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	00f42400 	.word	0x00f42400

08001444 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e28d      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8083 	beq.w	800156a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001464:	4b94      	ldr	r3, [pc, #592]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b04      	cmp	r3, #4
 800146e:	d019      	beq.n	80014a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001470:	4b91      	ldr	r3, [pc, #580]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 030c 	and.w	r3, r3, #12
        || \
 8001478:	2b08      	cmp	r3, #8
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800147c:	4b8e      	ldr	r3, [pc, #568]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001484:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001488:	d00c      	beq.n	80014a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148a:	4b8b      	ldr	r3, [pc, #556]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001492:	2b0c      	cmp	r3, #12
 8001494:	d112      	bne.n	80014bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001496:	4b88      	ldr	r3, [pc, #544]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800149e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014a2:	d10b      	bne.n	80014bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	4b84      	ldr	r3, [pc, #528]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d05b      	beq.n	8001568 <HAL_RCC_OscConfig+0x124>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d157      	bne.n	8001568 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e25a      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x90>
 80014c6:	4b7c      	ldr	r3, [pc, #496]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a7b      	ldr	r2, [pc, #492]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e01d      	b.n	8001510 <HAL_RCC_OscConfig+0xcc>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0xb4>
 80014de:	4b76      	ldr	r3, [pc, #472]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a75      	ldr	r2, [pc, #468]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b73      	ldr	r3, [pc, #460]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a72      	ldr	r2, [pc, #456]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xcc>
 80014f8:	4b6f      	ldr	r3, [pc, #444]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a6e      	ldr	r2, [pc, #440]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b6c      	ldr	r3, [pc, #432]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a6b      	ldr	r2, [pc, #428]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800150e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff f9a4 	bl	8000864 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff f9a0 	bl	8000864 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	@ 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e21f      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b61      	ldr	r3, [pc, #388]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0xdc>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff f990 	bl	8000864 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff f98c 	bl	8000864 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	@ 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e20b      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	4b57      	ldr	r3, [pc, #348]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x104>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d06f      	beq.n	8001656 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001576:	4b50      	ldr	r3, [pc, #320]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b00      	cmp	r3, #0
 8001580:	d017      	beq.n	80015b2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001582:	4b4d      	ldr	r3, [pc, #308]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
        || \
 800158a:	2b08      	cmp	r3, #8
 800158c:	d105      	bne.n	800159a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800158e:	4b4a      	ldr	r3, [pc, #296]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159a:	4b47      	ldr	r3, [pc, #284]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	d11c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a6:	4b44      	ldr	r3, [pc, #272]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d116      	bne.n	80015e0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	4b41      	ldr	r3, [pc, #260]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_RCC_OscConfig+0x186>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e1d3      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ca:	4b3b      	ldr	r3, [pc, #236]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4937      	ldr	r1, [pc, #220]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	e03a      	b.n	8001656 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e8:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <HAL_RCC_OscConfig+0x278>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff f939 	bl	8000864 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff f935 	bl	8000864 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1b4      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4925      	ldr	r1, [pc, #148]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	e015      	b.n	8001656 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <HAL_RCC_OscConfig+0x278>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff f918 	bl	8000864 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff f914 	bl	8000864 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e193      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d036      	beq.n	80016d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d016      	beq.n	8001698 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_RCC_OscConfig+0x27c>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff f8f8 	bl	8000864 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff f8f4 	bl	8000864 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e173      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 800168c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x234>
 8001696:	e01b      	b.n	80016d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_RCC_OscConfig+0x27c>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169e:	f7ff f8e1 	bl	8000864 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a4:	e00e      	b.n	80016c4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a6:	f7ff f8dd 	bl	8000864 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d907      	bls.n	80016c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e15c      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
 80016b8:	40023800 	.word	0x40023800
 80016bc:	42470000 	.word	0x42470000
 80016c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c4:	4b8a      	ldr	r3, [pc, #552]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 80016c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1ea      	bne.n	80016a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 8097 	beq.w	800180c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e2:	4b83      	ldr	r3, [pc, #524]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10f      	bne.n	800170e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b7f      	ldr	r3, [pc, #508]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a7e      	ldr	r2, [pc, #504]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b7c      	ldr	r3, [pc, #496]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170a:	2301      	movs	r3, #1
 800170c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	4b79      	ldr	r3, [pc, #484]	@ (80018f4 <HAL_RCC_OscConfig+0x4b0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d118      	bne.n	800174c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171a:	4b76      	ldr	r3, [pc, #472]	@ (80018f4 <HAL_RCC_OscConfig+0x4b0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a75      	ldr	r2, [pc, #468]	@ (80018f4 <HAL_RCC_OscConfig+0x4b0>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001726:	f7ff f89d 	bl	8000864 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172e:	f7ff f899 	bl	8000864 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e118      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	4b6c      	ldr	r3, [pc, #432]	@ (80018f4 <HAL_RCC_OscConfig+0x4b0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x31e>
 8001754:	4b66      	ldr	r3, [pc, #408]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001758:	4a65      	ldr	r2, [pc, #404]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001760:	e01c      	b.n	800179c <HAL_RCC_OscConfig+0x358>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b05      	cmp	r3, #5
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x340>
 800176a:	4b61      	ldr	r3, [pc, #388]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176e:	4a60      	ldr	r2, [pc, #384]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6713      	str	r3, [r2, #112]	@ 0x70
 8001776:	4b5e      	ldr	r3, [pc, #376]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177a:	4a5d      	ldr	r2, [pc, #372]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6713      	str	r3, [r2, #112]	@ 0x70
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0x358>
 8001784:	4b5a      	ldr	r3, [pc, #360]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	4a59      	ldr	r2, [pc, #356]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001790:	4b57      	ldr	r3, [pc, #348]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001794:	4a56      	ldr	r2, [pc, #344]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 8001796:	f023 0304 	bic.w	r3, r3, #4
 800179a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff f85e 	bl	8000864 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7ff f85a 	bl	8000864 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e0d7      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c2:	4b4b      	ldr	r3, [pc, #300]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0ee      	beq.n	80017ac <HAL_RCC_OscConfig+0x368>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff f848 	bl	8000864 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff f844 	bl	8000864 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e0c1      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ee:	4b40      	ldr	r3, [pc, #256]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ee      	bne.n	80017d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001800:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	4a3a      	ldr	r2, [pc, #232]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 8001806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800180a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80ad 	beq.w	8001970 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001816:	4b36      	ldr	r3, [pc, #216]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	d060      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d145      	bne.n	80018b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b33      	ldr	r3, [pc, #204]	@ (80018f8 <HAL_RCC_OscConfig+0x4b4>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff f818 	bl	8000864 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff f814 	bl	8000864 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e093      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	019b      	lsls	r3, r3, #6
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	3b01      	subs	r3, #1
 8001870:	041b      	lsls	r3, r3, #16
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001878:	061b      	lsls	r3, r3, #24
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	071b      	lsls	r3, r3, #28
 8001882:	491b      	ldr	r1, [pc, #108]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_RCC_OscConfig+0x4b4>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7fe ffe9 	bl	8000864 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001896:	f7fe ffe5 	bl	8000864 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e064      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x452>
 80018b4:	e05c      	b.n	8001970 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <HAL_RCC_OscConfig+0x4b4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7fe ffd2 	bl	8000864 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7fe ffce 	bl	8000864 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e04d      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_RCC_OscConfig+0x4ac>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x480>
 80018e2:	e045      	b.n	8001970 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e040      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000
 80018f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018fc:	4b1f      	ldr	r3, [pc, #124]	@ (800197c <HAL_RCC_OscConfig+0x538>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d030      	beq.n	800196c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d129      	bne.n	800196c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d122      	bne.n	800196c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001934:	4293      	cmp	r3, r2
 8001936:	d119      	bne.n	800196c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d10f      	bne.n	800196c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d107      	bne.n	800196c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e041      	b.n	8001a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7fe feae 	bl	8000708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3304      	adds	r3, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f000 f89e 	bl	8001b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d001      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e04e      	b.n	8001ad6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a23      	ldr	r2, [pc, #140]	@ (8001ae4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d022      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a62:	d01d      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d018      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1e      	ldr	r2, [pc, #120]	@ (8001aec <HAL_TIM_Base_Start_IT+0xcc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00e      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1b      	ldr	r2, [pc, #108]	@ (8001af4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d009      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a19      	ldr	r2, [pc, #100]	@ (8001af8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d004      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a18      	ldr	r2, [pc, #96]	@ (8001afc <HAL_TIM_Base_Start_IT+0xdc>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d111      	bne.n	8001ac4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d010      	beq.n	8001ad4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0201 	orr.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac2:	e007      	b.n	8001ad4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	40000800 	.word	0x40000800
 8001af0:	40000c00 	.word	0x40000c00
 8001af4:	40010400 	.word	0x40010400
 8001af8:	40014000 	.word	0x40014000
 8001afc:	40001800 	.word	0x40001800

08001b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a46      	ldr	r2, [pc, #280]	@ (8001c2c <TIM_Base_SetConfig+0x12c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d013      	beq.n	8001b40 <TIM_Base_SetConfig+0x40>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b1e:	d00f      	beq.n	8001b40 <TIM_Base_SetConfig+0x40>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a43      	ldr	r2, [pc, #268]	@ (8001c30 <TIM_Base_SetConfig+0x130>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d00b      	beq.n	8001b40 <TIM_Base_SetConfig+0x40>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a42      	ldr	r2, [pc, #264]	@ (8001c34 <TIM_Base_SetConfig+0x134>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d007      	beq.n	8001b40 <TIM_Base_SetConfig+0x40>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a41      	ldr	r2, [pc, #260]	@ (8001c38 <TIM_Base_SetConfig+0x138>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d003      	beq.n	8001b40 <TIM_Base_SetConfig+0x40>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a40      	ldr	r2, [pc, #256]	@ (8001c3c <TIM_Base_SetConfig+0x13c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d108      	bne.n	8001b52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a35      	ldr	r2, [pc, #212]	@ (8001c2c <TIM_Base_SetConfig+0x12c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d02b      	beq.n	8001bb2 <TIM_Base_SetConfig+0xb2>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b60:	d027      	beq.n	8001bb2 <TIM_Base_SetConfig+0xb2>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a32      	ldr	r2, [pc, #200]	@ (8001c30 <TIM_Base_SetConfig+0x130>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d023      	beq.n	8001bb2 <TIM_Base_SetConfig+0xb2>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a31      	ldr	r2, [pc, #196]	@ (8001c34 <TIM_Base_SetConfig+0x134>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <TIM_Base_SetConfig+0xb2>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a30      	ldr	r2, [pc, #192]	@ (8001c38 <TIM_Base_SetConfig+0x138>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01b      	beq.n	8001bb2 <TIM_Base_SetConfig+0xb2>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c3c <TIM_Base_SetConfig+0x13c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d017      	beq.n	8001bb2 <TIM_Base_SetConfig+0xb2>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a2e      	ldr	r2, [pc, #184]	@ (8001c40 <TIM_Base_SetConfig+0x140>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <TIM_Base_SetConfig+0xb2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8001c44 <TIM_Base_SetConfig+0x144>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00f      	beq.n	8001bb2 <TIM_Base_SetConfig+0xb2>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a2c      	ldr	r2, [pc, #176]	@ (8001c48 <TIM_Base_SetConfig+0x148>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00b      	beq.n	8001bb2 <TIM_Base_SetConfig+0xb2>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c4c <TIM_Base_SetConfig+0x14c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <TIM_Base_SetConfig+0xb2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8001c50 <TIM_Base_SetConfig+0x150>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <TIM_Base_SetConfig+0xb2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a29      	ldr	r2, [pc, #164]	@ (8001c54 <TIM_Base_SetConfig+0x154>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d108      	bne.n	8001bc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a10      	ldr	r2, [pc, #64]	@ (8001c2c <TIM_Base_SetConfig+0x12c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d003      	beq.n	8001bf8 <TIM_Base_SetConfig+0xf8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a12      	ldr	r2, [pc, #72]	@ (8001c3c <TIM_Base_SetConfig+0x13c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d103      	bne.n	8001c00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f023 0201 	bic.w	r2, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	611a      	str	r2, [r3, #16]
  }
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	40000400 	.word	0x40000400
 8001c34:	40000800 	.word	0x40000800
 8001c38:	40000c00 	.word	0x40000c00
 8001c3c:	40010400 	.word	0x40010400
 8001c40:	40014000 	.word	0x40014000
 8001c44:	40014400 	.word	0x40014400
 8001c48:	40014800 	.word	0x40014800
 8001c4c:	40001800 	.word	0x40001800
 8001c50:	40001c00 	.word	0x40001c00
 8001c54:	40002000 	.word	0x40002000

08001c58 <__libc_init_array>:
 8001c58:	b570      	push	{r4, r5, r6, lr}
 8001c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8001c90 <__libc_init_array+0x38>)
 8001c5c:	4c0d      	ldr	r4, [pc, #52]	@ (8001c94 <__libc_init_array+0x3c>)
 8001c5e:	1b64      	subs	r4, r4, r5
 8001c60:	10a4      	asrs	r4, r4, #2
 8001c62:	2600      	movs	r6, #0
 8001c64:	42a6      	cmp	r6, r4
 8001c66:	d109      	bne.n	8001c7c <__libc_init_array+0x24>
 8001c68:	4d0b      	ldr	r5, [pc, #44]	@ (8001c98 <__libc_init_array+0x40>)
 8001c6a:	4c0c      	ldr	r4, [pc, #48]	@ (8001c9c <__libc_init_array+0x44>)
 8001c6c:	f000 f818 	bl	8001ca0 <_init>
 8001c70:	1b64      	subs	r4, r4, r5
 8001c72:	10a4      	asrs	r4, r4, #2
 8001c74:	2600      	movs	r6, #0
 8001c76:	42a6      	cmp	r6, r4
 8001c78:	d105      	bne.n	8001c86 <__libc_init_array+0x2e>
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
 8001c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c80:	4798      	blx	r3
 8001c82:	3601      	adds	r6, #1
 8001c84:	e7ee      	b.n	8001c64 <__libc_init_array+0xc>
 8001c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c8a:	4798      	blx	r3
 8001c8c:	3601      	adds	r6, #1
 8001c8e:	e7f2      	b.n	8001c76 <__libc_init_array+0x1e>
 8001c90:	08001cd0 	.word	0x08001cd0
 8001c94:	08001cd0 	.word	0x08001cd0
 8001c98:	08001cd0 	.word	0x08001cd0
 8001c9c:	08001cd4 	.word	0x08001cd4

08001ca0 <_init>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr

08001cac <_fini>:
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cae:	bf00      	nop
 8001cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb2:	bc08      	pop	{r3}
 8001cb4:	469e      	mov	lr, r3
 8001cb6:	4770      	bx	lr
